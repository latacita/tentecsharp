«EXTENSION javaSkeletonExtensions::TypeExtractorExtension»
«DEFINE classTemplate FOR uml::Class»
«LET this.getNearestPackage().nestingPackage.name AS packageName»
«FILE "/"+packageName.toFirstLower()+"/"+this.name.toFirstUpper()+".cs"»

public class «this.name.toFirstUpper()»«IF this.allParents().size>0» : «FOREACH this.allParents() AS extends SEPARATOR ','» «extends.getNearestPackage().nestingPackage.name».«extends.name»«ENDFOREACH»«ENDIF»	
{
«EXPAND propertiesDefinition FOREACH ownedElement.typeSelect(uml::Property)»
	public «this.name.toFirstUpper()» ()
	{
				
	}
«EXPAND propertiesGettersSetters FOREACH ownedElement.typeSelect(uml::Property)»
«EXPAND operations FOREACH ownedElement.typeSelect(uml::Operation)»
«EXPAND InnerClassTemplate::innerClassTemplate FOREACH ownedElement.typeSelect(uml::Class)»
}«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE propertiesDefinition FOR uml::Property»	 «IF this.upper!=1»ArrayList«ELSE»«IF extractTypePlugin(this.type.name)=="boolean"»Boolean«ELSE»«extractTypePlugin(this.type.name)»«ENDIF»«ENDIF» «this.name» = new ArrayList();
«ENDDEFINE»

«DEFINE propertiesGettersSetters FOR uml::Property»		public «IF this.upper!=1»ArrayList«ELSE»«IF extractTypePlugin(this.type.name)=="boolean"»Boolean«ELSE»«extractTypePlugin(this.type.name)»«ENDIF»«ENDIF» get«this.name.toFirstUpper()»()
	{
		return «this.name»;
	}
	
«IF !this.isReadOnly»	public void set«this.name.toFirstUpper()»(«IF this.upper!=1»ArrayList«ELSEIF this.type.metaType==uml::Enumeration»«this.getNearestPackage().nestingPackage.name.toFirstUpper()».«this.type.name»«ELSE»«IF extractTypePlugin(this.type.name)=="boolean"»Boolean«ELSE»«extractTypePlugin(this.type.name)»«ENDIF»«ENDIF» value)
		{
			this.«this.name»=value;
		}«IF (this.upper==1) && (extractTypePlugin(this.type.name)=="float")»
	
		public void set«this.name.toFirstUpper()»(String value)
		{
			this.«this.name.toString()»=float.parse(value);
		}«ENDIF»«IF this.upper!=1»
	
		public void add«this.name.toFirstUpper()»Element(«extractTypePlugin(this.type.name)» value){
			this.«this.name».add(value);
		}«ENDIF»«ENDIF»
	
«ENDDEFINE»

«DEFINE operations FOR uml::Operation»			public «IF extractTypePlugin(this.type.name)=="boolean"»Boolean«ELSE»«extractTypePlugin(this.type.name)»«ENDIF» «this.name»(«FOREACH this.ownedParameter.reject(e|e.direction==uml::ParameterDirectionKind::return) AS param SEPARATOR ','»«IF param.upper==1»«IF extractTypePlugin(param.type.name)=="boolean"»Boolean«ELSE»«extractTypePlugin(param.type.name)»«ENDIF»«ELSE»ArrayList«ENDIF» «param.name»«ENDFOREACH»)
	{
«LET extractTypePlugin(this.type.name) AS auxType»«IF auxType!="void"»«IF ((auxType=="int")||(auxType=="float"))»		return 0;«ELSEIF auxType=="boolean"»		return false;«ELSE»		return null;«ENDIF»«ENDIF»«ENDLET»
	}
«ENDDEFINE»