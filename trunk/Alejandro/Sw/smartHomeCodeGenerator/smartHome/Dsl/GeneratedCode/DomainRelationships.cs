//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship SmartHomeHasFloors
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasFloors.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasFloors.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b1e3d756-b542-40bf-963b-4d57b6d24d5a")]
	public partial class SmartHomeHasFloors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SmartHomeHasFloors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb1e3d756, 0xb542, 0x40bf, 0x96, 0x3b, 0x4d, 0x57, 0xb6, 0xd2, 0x4d, 0x5a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SmartHomeHasFloors link in the same Partition as the given SmartHome
		/// </summary>
		/// <param name="source">SmartHome to use as the source of the relationship.</param>
		/// <param name="target">Floor to use as the target of the relationship.</param>
		public SmartHomeHasFloors(SmartHome source, Floor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SmartHomeHasFloors.SmartHomeDomainRoleId, source), new DslModeling::RoleAssignment(SmartHomeHasFloors.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasFloors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasFloors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasFloors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasFloors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome domain role code
		
		/// <summary>
		/// SmartHome domain role Id.
		/// </summary>
		public static readonly global::System.Guid SmartHomeDomainRoleId = new global::System.Guid(0xba5d1ad2, 0x58e1, 0x4abf, 0x96, 0x29, 0xbd, 0x62, 0x35, 0x07, 0x09, 0x67);
		
		/// <summary>
		/// DomainRole SmartHome
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasFloors/SmartHome.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasFloors/SmartHome.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Floors", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasFloors/SmartHome.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("ba5d1ad2-58e1-4abf-9629-bd6235070967")]
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SmartHome)DslModeling::DomainRoleInfo.GetRolePlayer(this, SmartHomeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SmartHomeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SmartHome of a Floor
		/// <summary>
		/// Gets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SmartHome GetSmartHome(Floor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as SmartHome;
		}
		
		/// <summary>
		/// Sets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSmartHome(Floor element, SmartHome newSmartHome)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newSmartHome);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xe6deb1db, 0x710c, 0x4835, 0xb9, 0x81, 0x4b, 0xc2, 0x07, 0x1c, 0xe1, 0xfe);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasFloors/Element.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasFloors/Element.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SmartHome", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasFloors/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e6deb1db-710c-4835-b981-4bc2071ce1fe")]
		public virtual Floor Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Floor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Floors of a SmartHome
		/// <summary>
		/// Gets a list of Floors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Floor> GetFloors(SmartHome element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Floor>, Floor>(element, SmartHomeDomainRoleId);
		}
		#endregion
		#region SmartHome link accessor
		/// <summary>
		/// Get the list of SmartHomeHasFloors links to a SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.SmartHomeHasFloors> GetLinksToFloors ( global::Unican.smartHome.SmartHome smartHomeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasFloors>(smartHomeInstance, global::Unican.smartHome.SmartHomeHasFloors.SmartHomeDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the SmartHomeHasFloors link to a Floor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasFloors GetLinkToSmartHome (global::Unican.smartHome.Floor elementInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasFloors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasFloors>(elementInstance, global::Unican.smartHome.SmartHomeHasFloors.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SmartHomeHasFloors instance accessors
		
		/// <summary>
		/// Get any SmartHomeHasFloors links between a given SmartHome and a Floor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.SmartHomeHasFloors> GetLinks( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.Floor target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasFloors> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasFloors>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasFloors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasFloors>(source, global::Unican.smartHome.SmartHomeHasFloors.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasFloors link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SmartHomeHasFloors link between a given SmartHomeand a Floor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasFloors GetLink( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.Floor target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasFloors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasFloors>(source, global::Unican.smartHome.SmartHomeHasFloors.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasFloors link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship FloorHasRooms
	/// Description for Unican.smartHome.FloorHasRooms
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.FloorHasRooms.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.FloorHasRooms.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6efe760c-16d9-4e70-b0b1-8a7f0aebadf0")]
	public partial class FloorHasRooms : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FloorHasRooms domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6efe760c, 0x16d9, 0x4e70, 0xb0, 0xb1, 0x8a, 0x7f, 0x0a, 0xeb, 0xad, 0xf0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FloorHasRooms link in the same Partition as the given Floor
		/// </summary>
		/// <param name="source">Floor to use as the source of the relationship.</param>
		/// <param name="target">Room to use as the target of the relationship.</param>
		public FloorHasRooms(Floor source, Room target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FloorHasRooms.FloorDomainRoleId, source), new DslModeling::RoleAssignment(FloorHasRooms.RoomDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FloorHasRooms(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FloorHasRooms(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FloorHasRooms(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FloorHasRooms(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Floor domain role code
		
		/// <summary>
		/// Floor domain role Id.
		/// </summary>
		public static readonly global::System.Guid FloorDomainRoleId = new global::System.Guid(0xbab5f396, 0x6bb0, 0x493e, 0x8b, 0xfc, 0x38, 0x8b, 0xd4, 0x71, 0xae, 0x03);
		
		/// <summary>
		/// DomainRole Floor
		/// Description for Unican.smartHome.FloorHasRooms.Floor
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.FloorHasRooms/Floor.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.FloorHasRooms/Floor.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Rooms", PropertyDisplayNameKey="Unican.smartHome.FloorHasRooms/Floor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("bab5f396-6bb0-493e-8bfc-388bd471ae03")]
		public virtual Floor Floor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Floor)DslModeling::DomainRoleInfo.GetRolePlayer(this, FloorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FloorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Floor of a Room
		/// <summary>
		/// Gets Floor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Floor GetFloor(Room element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoomDomainRoleId) as Floor;
		}
		
		/// <summary>
		/// Sets Floor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFloor(Room element, Floor newFloor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoomDomainRoleId, newFloor);
		}
		#endregion
		#region Room domain role code
		
		/// <summary>
		/// Room domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoomDomainRoleId = new global::System.Guid(0x95b61f6f, 0xa316, 0x4fb8, 0x95, 0xfe, 0x88, 0xc3, 0x49, 0x0a, 0xa1, 0xa5);
		
		/// <summary>
		/// DomainRole Room
		/// Description for Unican.smartHome.FloorHasRooms.Room
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.FloorHasRooms/Room.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.FloorHasRooms/Room.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Floor", PropertyDisplayNameKey="Unican.smartHome.FloorHasRooms/Room.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("95b61f6f-a316-4fb8-95fe-88c3490aa1a5")]
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Room)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoomDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoomDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Rooms of a Floor
		/// <summary>
		/// Gets a list of Rooms.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Room> GetRooms(Floor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Room>, Room>(element, FloorDomainRoleId);
		}
		#endregion
		#region Floor link accessor
		/// <summary>
		/// Get the list of FloorHasRooms links to a Floor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.FloorHasRooms> GetLinksToRooms ( global::Unican.smartHome.Floor floorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.FloorHasRooms>(floorInstance, global::Unican.smartHome.FloorHasRooms.FloorDomainRoleId);
		}
		#endregion
		#region Room link accessor
		/// <summary>
		/// Get the FloorHasRooms link to a Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.FloorHasRooms GetLinkToFloor (global::Unican.smartHome.Room roomInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.FloorHasRooms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.FloorHasRooms>(roomInstance, global::Unican.smartHome.FloorHasRooms.RoomDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Room not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FloorHasRooms instance accessors
		
		/// <summary>
		/// Get any FloorHasRooms links between a given Floor and a Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.FloorHasRooms> GetLinks( global::Unican.smartHome.Floor source, global::Unican.smartHome.Room target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.FloorHasRooms> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.FloorHasRooms>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.FloorHasRooms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.FloorHasRooms>(source, global::Unican.smartHome.FloorHasRooms.FloorDomainRoleId);
			foreach ( global::Unican.smartHome.FloorHasRooms link in links )
			{
				if ( target.Equals(link.Room) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FloorHasRooms link between a given Floorand a Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.FloorHasRooms GetLink( global::Unican.smartHome.Floor source, global::Unican.smartHome.Room target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.FloorHasRooms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.FloorHasRooms>(source, global::Unican.smartHome.FloorHasRooms.FloorDomainRoleId);
			foreach ( global::Unican.smartHome.FloorHasRooms link in links )
			{
				if ( target.Equals(link.Room) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship SmartHomeHasSmartEnergy
	/// Description for Unican.smartHome.SmartHomeHasSmartEnergy
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasSmartEnergy.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasSmartEnergy.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f40ed51e-26b2-48c9-8cdc-2fc2712eccf6")]
	public partial class SmartHomeHasSmartEnergy : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SmartHomeHasSmartEnergy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf40ed51e, 0x26b2, 0x48c9, 0x8c, 0xdc, 0x2f, 0xc2, 0x71, 0x2e, 0xcc, 0xf6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SmartHomeHasSmartEnergy link in the same Partition as the given SmartHome
		/// </summary>
		/// <param name="source">SmartHome to use as the source of the relationship.</param>
		/// <param name="target">SmartEnergy to use as the target of the relationship.</param>
		public SmartHomeHasSmartEnergy(SmartHome source, SmartEnergy target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SmartHomeHasSmartEnergy.SmartHomeDomainRoleId, source), new DslModeling::RoleAssignment(SmartHomeHasSmartEnergy.SmartEnergyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasSmartEnergy(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasSmartEnergy(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasSmartEnergy(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasSmartEnergy(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome domain role code
		
		/// <summary>
		/// SmartHome domain role Id.
		/// </summary>
		public static readonly global::System.Guid SmartHomeDomainRoleId = new global::System.Guid(0xefc420ac, 0xcc14, 0x41bc, 0x97, 0x63, 0x90, 0x00, 0x42, 0x44, 0x7e, 0x9c);
		
		/// <summary>
		/// DomainRole SmartHome
		/// Description for Unican.smartHome.SmartHomeHasSmartEnergy.SmartHome
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasSmartEnergy/SmartHome.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasSmartEnergy/SmartHome.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SmartEnergy", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasSmartEnergy/SmartHome.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("efc420ac-cc14-41bc-9763-900042447e9c")]
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SmartHome)DslModeling::DomainRoleInfo.GetRolePlayer(this, SmartHomeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SmartHomeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SmartHome of a SmartEnergy
		/// <summary>
		/// Gets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SmartHome GetSmartHome(SmartEnergy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SmartEnergyDomainRoleId) as SmartHome;
		}
		
		/// <summary>
		/// Sets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSmartHome(SmartEnergy element, SmartHome newSmartHome)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SmartEnergyDomainRoleId, newSmartHome);
		}
		#endregion
		#region SmartEnergy domain role code
		
		/// <summary>
		/// SmartEnergy domain role Id.
		/// </summary>
		public static readonly global::System.Guid SmartEnergyDomainRoleId = new global::System.Guid(0x6362b6d1, 0xf262, 0x4786, 0x9e, 0x11, 0x32, 0xbf, 0xeb, 0x8d, 0xce, 0x8e);
		
		/// <summary>
		/// DomainRole SmartEnergy
		/// Description for Unican.smartHome.SmartHomeHasSmartEnergy.SmartEnergy
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasSmartEnergy/SmartEnergy.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasSmartEnergy/SmartEnergy.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SmartHome", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasSmartEnergy/SmartEnergy.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6362b6d1-f262-4786-9e11-32bfeb8dce8e")]
		public virtual SmartEnergy SmartEnergy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SmartEnergy)DslModeling::DomainRoleInfo.GetRolePlayer(this, SmartEnergyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SmartEnergyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SmartEnergy of a SmartHome
		/// <summary>
		/// Gets SmartEnergy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SmartEnergy GetSmartEnergy(SmartHome element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SmartHomeDomainRoleId) as SmartEnergy;
		}
		
		/// <summary>
		/// Sets SmartEnergy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSmartEnergy(SmartHome element, SmartEnergy newSmartEnergy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SmartHomeDomainRoleId, newSmartEnergy);
		}
		#endregion
		#region SmartHome link accessor
		/// <summary>
		/// Get the SmartHomeHasSmartEnergy link to a SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasSmartEnergy GetLinkToSmartEnergy (global::Unican.smartHome.SmartHome smartHomeInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasSmartEnergy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasSmartEnergy>(smartHomeInstance, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartHomeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SmartHome not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SmartEnergy link accessor
		/// <summary>
		/// Get the SmartHomeHasSmartEnergy link to a SmartEnergy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasSmartEnergy GetLinkToSmartHome (global::Unican.smartHome.SmartEnergy smartEnergyInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasSmartEnergy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasSmartEnergy>(smartEnergyInstance, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartEnergyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SmartEnergy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SmartHomeHasSmartEnergy instance accessors
		
		/// <summary>
		/// Get any SmartHomeHasSmartEnergy links between a given SmartHome and a SmartEnergy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.SmartHomeHasSmartEnergy> GetLinks( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.SmartEnergy target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasSmartEnergy> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasSmartEnergy>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasSmartEnergy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasSmartEnergy>(source, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasSmartEnergy link in links )
			{
				if ( target.Equals(link.SmartEnergy) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SmartHomeHasSmartEnergy link between a given SmartHomeand a SmartEnergy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasSmartEnergy GetLink( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.SmartEnergy target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasSmartEnergy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasSmartEnergy>(source, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasSmartEnergy link in links )
			{
				if ( target.Equals(link.SmartEnergy) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship SmartHomeHasLightSimulation
	/// Description for Unican.smartHome.SmartHomeHasLightSimulation
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasLightSimulation.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasLightSimulation.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dc53a7b5-fc47-43b1-8a48-73d0bda5544a")]
	public partial class SmartHomeHasLightSimulation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SmartHomeHasLightSimulation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdc53a7b5, 0xfc47, 0x43b1, 0x8a, 0x48, 0x73, 0xd0, 0xbd, 0xa5, 0x54, 0x4a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SmartHomeHasLightSimulation link in the same Partition as the given SmartHome
		/// </summary>
		/// <param name="source">SmartHome to use as the source of the relationship.</param>
		/// <param name="target">LightSimulation to use as the target of the relationship.</param>
		public SmartHomeHasLightSimulation(SmartHome source, LightSimulation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SmartHomeHasLightSimulation.SmartHomeDomainRoleId, source), new DslModeling::RoleAssignment(SmartHomeHasLightSimulation.LightSimulationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasLightSimulation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasLightSimulation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasLightSimulation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasLightSimulation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome domain role code
		
		/// <summary>
		/// SmartHome domain role Id.
		/// </summary>
		public static readonly global::System.Guid SmartHomeDomainRoleId = new global::System.Guid(0x7c8d569a, 0xb60c, 0x4b37, 0xa2, 0x9f, 0xa9, 0x10, 0x80, 0xe6, 0xe4, 0xa1);
		
		/// <summary>
		/// DomainRole SmartHome
		/// Description for Unican.smartHome.SmartHomeHasLightSimulation.SmartHome
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasLightSimulation/SmartHome.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasLightSimulation/SmartHome.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LightSimulation", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasLightSimulation/SmartHome.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7c8d569a-b60c-4b37-a29f-a91080e6e4a1")]
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SmartHome)DslModeling::DomainRoleInfo.GetRolePlayer(this, SmartHomeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SmartHomeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SmartHome of a LightSimulation
		/// <summary>
		/// Gets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SmartHome GetSmartHome(LightSimulation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LightSimulationDomainRoleId) as SmartHome;
		}
		
		/// <summary>
		/// Sets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSmartHome(LightSimulation element, SmartHome newSmartHome)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LightSimulationDomainRoleId, newSmartHome);
		}
		#endregion
		#region LightSimulation domain role code
		
		/// <summary>
		/// LightSimulation domain role Id.
		/// </summary>
		public static readonly global::System.Guid LightSimulationDomainRoleId = new global::System.Guid(0x7a7f51b2, 0x6650, 0x4874, 0xae, 0xe3, 0x14, 0x6c, 0x2c, 0xcb, 0xba, 0x84);
		
		/// <summary>
		/// DomainRole LightSimulation
		/// Description for Unican.smartHome.SmartHomeHasLightSimulation.LightSimulation
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasLightSimulation/LightSimulation.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasLightSimulation/LightSimulation.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SmartHome", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasLightSimulation/LightSimulation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7a7f51b2-6650-4874-aee3-146c2ccbba84")]
		public virtual LightSimulation LightSimulation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LightSimulation)DslModeling::DomainRoleInfo.GetRolePlayer(this, LightSimulationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LightSimulationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LightSimulation of a SmartHome
		/// <summary>
		/// Gets LightSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LightSimulation GetLightSimulation(SmartHome element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SmartHomeDomainRoleId) as LightSimulation;
		}
		
		/// <summary>
		/// Sets LightSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLightSimulation(SmartHome element, LightSimulation newLightSimulation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SmartHomeDomainRoleId, newLightSimulation);
		}
		#endregion
		#region SmartHome link accessor
		/// <summary>
		/// Get the SmartHomeHasLightSimulation link to a SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasLightSimulation GetLinkToLightSimulation (global::Unican.smartHome.SmartHome smartHomeInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasLightSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasLightSimulation>(smartHomeInstance, global::Unican.smartHome.SmartHomeHasLightSimulation.SmartHomeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SmartHome not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LightSimulation link accessor
		/// <summary>
		/// Get the SmartHomeHasLightSimulation link to a LightSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasLightSimulation GetLinkToSmartHome (global::Unican.smartHome.LightSimulation lightSimulationInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasLightSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasLightSimulation>(lightSimulationInstance, global::Unican.smartHome.SmartHomeHasLightSimulation.LightSimulationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LightSimulation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SmartHomeHasLightSimulation instance accessors
		
		/// <summary>
		/// Get any SmartHomeHasLightSimulation links between a given SmartHome and a LightSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.SmartHomeHasLightSimulation> GetLinks( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.LightSimulation target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasLightSimulation> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasLightSimulation>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasLightSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasLightSimulation>(source, global::Unican.smartHome.SmartHomeHasLightSimulation.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasLightSimulation link in links )
			{
				if ( target.Equals(link.LightSimulation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SmartHomeHasLightSimulation link between a given SmartHomeand a LightSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasLightSimulation GetLink( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.LightSimulation target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasLightSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasLightSimulation>(source, global::Unican.smartHome.SmartHomeHasLightSimulation.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasLightSimulation link in links )
			{
				if ( target.Equals(link.LightSimulation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship SmartHomeHasBlindSimulation
	/// Description for Unican.smartHome.SmartHomeHasBlindSimulation
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasBlindSimulation.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasBlindSimulation.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dd4a4a09-0570-4baa-a695-ba7832d2a70c")]
	public partial class SmartHomeHasBlindSimulation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SmartHomeHasBlindSimulation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdd4a4a09, 0x0570, 0x4baa, 0xa6, 0x95, 0xba, 0x78, 0x32, 0xd2, 0xa7, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SmartHomeHasBlindSimulation link in the same Partition as the given SmartHome
		/// </summary>
		/// <param name="source">SmartHome to use as the source of the relationship.</param>
		/// <param name="target">BlindSimulation to use as the target of the relationship.</param>
		public SmartHomeHasBlindSimulation(SmartHome source, BlindSimulation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SmartHomeHasBlindSimulation.SmartHomeDomainRoleId, source), new DslModeling::RoleAssignment(SmartHomeHasBlindSimulation.BlindSimulationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasBlindSimulation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasBlindSimulation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SmartHomeHasBlindSimulation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SmartHomeHasBlindSimulation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome domain role code
		
		/// <summary>
		/// SmartHome domain role Id.
		/// </summary>
		public static readonly global::System.Guid SmartHomeDomainRoleId = new global::System.Guid(0x0831bef8, 0x9e13, 0x4737, 0x87, 0x1d, 0xfd, 0x87, 0x84, 0xd6, 0x8a, 0x65);
		
		/// <summary>
		/// DomainRole SmartHome
		/// Description for Unican.smartHome.SmartHomeHasBlindSimulation.SmartHome
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasBlindSimulation/SmartHome.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasBlindSimulation/SmartHome.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BlindSimulation", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasBlindSimulation/SmartHome.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0831bef8-9e13-4737-871d-fd8784d68a65")]
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SmartHome)DslModeling::DomainRoleInfo.GetRolePlayer(this, SmartHomeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SmartHomeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SmartHome of a BlindSimulation
		/// <summary>
		/// Gets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SmartHome GetSmartHome(BlindSimulation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BlindSimulationDomainRoleId) as SmartHome;
		}
		
		/// <summary>
		/// Sets SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSmartHome(BlindSimulation element, SmartHome newSmartHome)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BlindSimulationDomainRoleId, newSmartHome);
		}
		#endregion
		#region BlindSimulation domain role code
		
		/// <summary>
		/// BlindSimulation domain role Id.
		/// </summary>
		public static readonly global::System.Guid BlindSimulationDomainRoleId = new global::System.Guid(0xfc56663c, 0x1ad8, 0x496a, 0xb4, 0x01, 0xf5, 0xcd, 0xd5, 0xc6, 0x8b, 0x81);
		
		/// <summary>
		/// DomainRole BlindSimulation
		/// Description for Unican.smartHome.SmartHomeHasBlindSimulation.BlindSimulation
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.SmartHomeHasBlindSimulation/BlindSimulation.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.SmartHomeHasBlindSimulation/BlindSimulation.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SmartHome", PropertyDisplayNameKey="Unican.smartHome.SmartHomeHasBlindSimulation/BlindSimulation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fc56663c-1ad8-496a-b401-f5cdd5c68b81")]
		public virtual BlindSimulation BlindSimulation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BlindSimulation)DslModeling::DomainRoleInfo.GetRolePlayer(this, BlindSimulationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BlindSimulationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BlindSimulation of a SmartHome
		/// <summary>
		/// Gets BlindSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BlindSimulation GetBlindSimulation(SmartHome element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SmartHomeDomainRoleId) as BlindSimulation;
		}
		
		/// <summary>
		/// Sets BlindSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBlindSimulation(SmartHome element, BlindSimulation newBlindSimulation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SmartHomeDomainRoleId, newBlindSimulation);
		}
		#endregion
		#region SmartHome link accessor
		/// <summary>
		/// Get the SmartHomeHasBlindSimulation link to a SmartHome.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasBlindSimulation GetLinkToBlindSimulation (global::Unican.smartHome.SmartHome smartHomeInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasBlindSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasBlindSimulation>(smartHomeInstance, global::Unican.smartHome.SmartHomeHasBlindSimulation.SmartHomeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SmartHome not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BlindSimulation link accessor
		/// <summary>
		/// Get the SmartHomeHasBlindSimulation link to a BlindSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasBlindSimulation GetLinkToSmartHome (global::Unican.smartHome.BlindSimulation blindSimulationInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasBlindSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasBlindSimulation>(blindSimulationInstance, global::Unican.smartHome.SmartHomeHasBlindSimulation.BlindSimulationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BlindSimulation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SmartHomeHasBlindSimulation instance accessors
		
		/// <summary>
		/// Get any SmartHomeHasBlindSimulation links between a given SmartHome and a BlindSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.SmartHomeHasBlindSimulation> GetLinks( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.BlindSimulation target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasBlindSimulation> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.SmartHomeHasBlindSimulation>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasBlindSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasBlindSimulation>(source, global::Unican.smartHome.SmartHomeHasBlindSimulation.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasBlindSimulation link in links )
			{
				if ( target.Equals(link.BlindSimulation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SmartHomeHasBlindSimulation link between a given SmartHomeand a BlindSimulation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.SmartHomeHasBlindSimulation GetLink( global::Unican.smartHome.SmartHome source, global::Unican.smartHome.BlindSimulation target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.SmartHomeHasBlindSimulation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.SmartHomeHasBlindSimulation>(source, global::Unican.smartHome.SmartHomeHasBlindSimulation.SmartHomeDomainRoleId);
			foreach ( global::Unican.smartHome.SmartHomeHasBlindSimulation link in links )
			{
				if ( target.Equals(link.BlindSimulation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship RoomHasHeaters
	/// Description for Unican.smartHome.RoomHasHeaters
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasHeaters.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.RoomHasHeaters.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1aec8149-57d6-4979-8cfe-56266ce61935")]
	public partial class RoomHasHeaters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoomHasHeaters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1aec8149, 0x57d6, 0x4979, 0x8c, 0xfe, 0x56, 0x26, 0x6c, 0xe6, 0x19, 0x35);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoomHasHeaters link in the same Partition as the given Room
		/// </summary>
		/// <param name="source">Room to use as the source of the relationship.</param>
		/// <param name="target">Heater to use as the target of the relationship.</param>
		public RoomHasHeaters(Room source, Heater target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoomHasHeaters.RoomDomainRoleId, source), new DslModeling::RoleAssignment(RoomHasHeaters.HeaterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoomHasHeaters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoomHasHeaters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoomHasHeaters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoomHasHeaters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Room domain role code
		
		/// <summary>
		/// Room domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoomDomainRoleId = new global::System.Guid(0x2234a919, 0x64fc, 0x459d, 0x92, 0xb6, 0x4b, 0xfc, 0x10, 0x01, 0x4f, 0xdc);
		
		/// <summary>
		/// DomainRole Room
		/// Description for Unican.smartHome.RoomHasHeaters.Room
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasHeaters/Room.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.RoomHasHeaters/Room.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Heaters", PropertyDisplayNameKey="Unican.smartHome.RoomHasHeaters/Room.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2234a919-64fc-459d-92b6-4bfc10014fdc")]
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Room)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoomDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoomDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Room of a Heater
		/// <summary>
		/// Gets Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Room GetRoom(Heater element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HeaterDomainRoleId) as Room;
		}
		
		/// <summary>
		/// Sets Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRoom(Heater element, Room newRoom)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HeaterDomainRoleId, newRoom);
		}
		#endregion
		#region Heater domain role code
		
		/// <summary>
		/// Heater domain role Id.
		/// </summary>
		public static readonly global::System.Guid HeaterDomainRoleId = new global::System.Guid(0x261b7f37, 0x5181, 0x4938, 0x89, 0x62, 0xbe, 0x93, 0x07, 0xf2, 0xc3, 0x63);
		
		/// <summary>
		/// DomainRole Heater
		/// Description for Unican.smartHome.RoomHasHeaters.Heater
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasHeaters/Heater.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.RoomHasHeaters/Heater.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Room", PropertyDisplayNameKey="Unican.smartHome.RoomHasHeaters/Heater.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("261b7f37-5181-4938-8962-be9307f2c363")]
		public virtual Heater Heater
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Heater)DslModeling::DomainRoleInfo.GetRolePlayer(this, HeaterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HeaterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Heaters of a Room
		/// <summary>
		/// Gets a list of Heaters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Heater> GetHeaters(Room element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Heater>, Heater>(element, RoomDomainRoleId);
		}
		#endregion
		#region Room link accessor
		/// <summary>
		/// Get the list of RoomHasHeaters links to a Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.RoomHasHeaters> GetLinksToHeaters ( global::Unican.smartHome.Room roomInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasHeaters>(roomInstance, global::Unican.smartHome.RoomHasHeaters.RoomDomainRoleId);
		}
		#endregion
		#region Heater link accessor
		/// <summary>
		/// Get the RoomHasHeaters link to a Heater.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.RoomHasHeaters GetLinkToRoom (global::Unican.smartHome.Heater heaterInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasHeaters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasHeaters>(heaterInstance, global::Unican.smartHome.RoomHasHeaters.HeaterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Heater not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoomHasHeaters instance accessors
		
		/// <summary>
		/// Get any RoomHasHeaters links between a given Room and a Heater.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.RoomHasHeaters> GetLinks( global::Unican.smartHome.Room source, global::Unican.smartHome.Heater target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.RoomHasHeaters> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.RoomHasHeaters>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasHeaters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasHeaters>(source, global::Unican.smartHome.RoomHasHeaters.RoomDomainRoleId);
			foreach ( global::Unican.smartHome.RoomHasHeaters link in links )
			{
				if ( target.Equals(link.Heater) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoomHasHeaters link between a given Roomand a Heater.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.RoomHasHeaters GetLink( global::Unican.smartHome.Room source, global::Unican.smartHome.Heater target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasHeaters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasHeaters>(source, global::Unican.smartHome.RoomHasHeaters.RoomDomainRoleId);
			foreach ( global::Unican.smartHome.RoomHasHeaters link in links )
			{
				if ( target.Equals(link.Heater) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship RoomHasWindows
	/// Description for Unican.smartHome.RoomHasWindows
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasWindows.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.RoomHasWindows.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7dfd65e0-3cfe-4bb6-9848-cddaa8ef8999")]
	public partial class RoomHasWindows : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoomHasWindows domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dfd65e0, 0x3cfe, 0x4bb6, 0x98, 0x48, 0xcd, 0xda, 0xa8, 0xef, 0x89, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoomHasWindows link in the same Partition as the given Room
		/// </summary>
		/// <param name="source">Room to use as the source of the relationship.</param>
		/// <param name="target">Window to use as the target of the relationship.</param>
		public RoomHasWindows(Room source, Window target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoomHasWindows.RoomDomainRoleId, source), new DslModeling::RoleAssignment(RoomHasWindows.WindowDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoomHasWindows(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoomHasWindows(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoomHasWindows(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoomHasWindows(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Room domain role code
		
		/// <summary>
		/// Room domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoomDomainRoleId = new global::System.Guid(0x1bb94c46, 0x367c, 0x4aa7, 0xaa, 0x67, 0xfe, 0x05, 0xa9, 0xdc, 0x14, 0x30);
		
		/// <summary>
		/// DomainRole Room
		/// Description for Unican.smartHome.RoomHasWindows.Room
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasWindows/Room.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.RoomHasWindows/Room.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Windows", PropertyDisplayNameKey="Unican.smartHome.RoomHasWindows/Room.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1bb94c46-367c-4aa7-aa67-fe05a9dc1430")]
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Room)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoomDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoomDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Room of a Window
		/// <summary>
		/// Gets Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Room GetRoom(Window element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, WindowDomainRoleId) as Room;
		}
		
		/// <summary>
		/// Sets Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRoom(Window element, Room newRoom)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, WindowDomainRoleId, newRoom);
		}
		#endregion
		#region Window domain role code
		
		/// <summary>
		/// Window domain role Id.
		/// </summary>
		public static readonly global::System.Guid WindowDomainRoleId = new global::System.Guid(0xca1396de, 0xfbe6, 0x4718, 0xad, 0xeb, 0xbc, 0xf5, 0x15, 0x93, 0xd4, 0xd0);
		
		/// <summary>
		/// DomainRole Window
		/// Description for Unican.smartHome.RoomHasWindows.Window
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasWindows/Window.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.RoomHasWindows/Window.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Room", PropertyDisplayNameKey="Unican.smartHome.RoomHasWindows/Window.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ca1396de-fbe6-4718-adeb-bcf51593d4d0")]
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Window)DslModeling::DomainRoleInfo.GetRolePlayer(this, WindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Windows of a Room
		/// <summary>
		/// Gets a list of Windows.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Window> GetWindows(Room element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Window>, Window>(element, RoomDomainRoleId);
		}
		#endregion
		#region Room link accessor
		/// <summary>
		/// Get the list of RoomHasWindows links to a Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.RoomHasWindows> GetLinksToWindows ( global::Unican.smartHome.Room roomInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasWindows>(roomInstance, global::Unican.smartHome.RoomHasWindows.RoomDomainRoleId);
		}
		#endregion
		#region Window link accessor
		/// <summary>
		/// Get the RoomHasWindows link to a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.RoomHasWindows GetLinkToRoom (global::Unican.smartHome.Window windowInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasWindows> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasWindows>(windowInstance, global::Unican.smartHome.RoomHasWindows.WindowDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Window not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoomHasWindows instance accessors
		
		/// <summary>
		/// Get any RoomHasWindows links between a given Room and a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.RoomHasWindows> GetLinks( global::Unican.smartHome.Room source, global::Unican.smartHome.Window target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.RoomHasWindows> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.RoomHasWindows>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasWindows> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasWindows>(source, global::Unican.smartHome.RoomHasWindows.RoomDomainRoleId);
			foreach ( global::Unican.smartHome.RoomHasWindows link in links )
			{
				if ( target.Equals(link.Window) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoomHasWindows link between a given Roomand a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.RoomHasWindows GetLink( global::Unican.smartHome.Room source, global::Unican.smartHome.Window target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasWindows> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasWindows>(source, global::Unican.smartHome.RoomHasWindows.RoomDomainRoleId);
			foreach ( global::Unican.smartHome.RoomHasWindows link in links )
			{
				if ( target.Equals(link.Window) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship WindowHasBlinds
	/// Description for Unican.smartHome.WindowHasBlinds
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.WindowHasBlinds.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.WindowHasBlinds.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2070a87c-56e1-49c1-8c0b-40e54739c1f7")]
	public partial class WindowHasBlinds : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// WindowHasBlinds domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2070a87c, 0x56e1, 0x49c1, 0x8c, 0x0b, 0x40, 0xe5, 0x47, 0x39, 0xc1, 0xf7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a WindowHasBlinds link in the same Partition as the given Window
		/// </summary>
		/// <param name="source">Window to use as the source of the relationship.</param>
		/// <param name="target">Blind to use as the target of the relationship.</param>
		public WindowHasBlinds(Window source, Blind target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(WindowHasBlinds.WindowDomainRoleId, source), new DslModeling::RoleAssignment(WindowHasBlinds.BlindDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WindowHasBlinds(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WindowHasBlinds(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WindowHasBlinds(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WindowHasBlinds(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Window domain role code
		
		/// <summary>
		/// Window domain role Id.
		/// </summary>
		public static readonly global::System.Guid WindowDomainRoleId = new global::System.Guid(0xb316aa4b, 0xc8f3, 0x4f40, 0xa6, 0x91, 0xa3, 0x89, 0x91, 0x63, 0xcb, 0x35);
		
		/// <summary>
		/// DomainRole Window
		/// Description for Unican.smartHome.WindowHasBlinds.Window
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.WindowHasBlinds/Window.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.WindowHasBlinds/Window.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Blinds", PropertyDisplayNameKey="Unican.smartHome.WindowHasBlinds/Window.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b316aa4b-c8f3-4f40-a691-a3899163cb35")]
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Window)DslModeling::DomainRoleInfo.GetRolePlayer(this, WindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Window of a Blind
		/// <summary>
		/// Gets Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Window GetWindow(Blind element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BlindDomainRoleId) as Window;
		}
		
		/// <summary>
		/// Sets Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetWindow(Blind element, Window newWindow)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BlindDomainRoleId, newWindow);
		}
		#endregion
		#region Blind domain role code
		
		/// <summary>
		/// Blind domain role Id.
		/// </summary>
		public static readonly global::System.Guid BlindDomainRoleId = new global::System.Guid(0xe37eb65d, 0xd8d5, 0x4dd1, 0xaf, 0xca, 0x17, 0x04, 0x9d, 0x18, 0x4f, 0x5b);
		
		/// <summary>
		/// DomainRole Blind
		/// Description for Unican.smartHome.WindowHasBlinds.Blind
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.WindowHasBlinds/Blind.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.WindowHasBlinds/Blind.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Window", PropertyDisplayNameKey="Unican.smartHome.WindowHasBlinds/Blind.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e37eb65d-d8d5-4dd1-afca-17049d184f5b")]
		public virtual Blind Blind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Blind)DslModeling::DomainRoleInfo.GetRolePlayer(this, BlindDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BlindDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Blinds of a Window
		/// <summary>
		/// Gets a list of Blinds.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Blind> GetBlinds(Window element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Blind>, Blind>(element, WindowDomainRoleId);
		}
		#endregion
		#region Window link accessor
		/// <summary>
		/// Get the list of WindowHasBlinds links to a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.WindowHasBlinds> GetLinksToBlinds ( global::Unican.smartHome.Window windowInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.WindowHasBlinds>(windowInstance, global::Unican.smartHome.WindowHasBlinds.WindowDomainRoleId);
		}
		#endregion
		#region Blind link accessor
		/// <summary>
		/// Get the WindowHasBlinds link to a Blind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.WindowHasBlinds GetLinkToWindow (global::Unican.smartHome.Blind blindInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.WindowHasBlinds> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.WindowHasBlinds>(blindInstance, global::Unican.smartHome.WindowHasBlinds.BlindDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Blind not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region WindowHasBlinds instance accessors
		
		/// <summary>
		/// Get any WindowHasBlinds links between a given Window and a Blind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.WindowHasBlinds> GetLinks( global::Unican.smartHome.Window source, global::Unican.smartHome.Blind target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.WindowHasBlinds> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.WindowHasBlinds>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.WindowHasBlinds> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.WindowHasBlinds>(source, global::Unican.smartHome.WindowHasBlinds.WindowDomainRoleId);
			foreach ( global::Unican.smartHome.WindowHasBlinds link in links )
			{
				if ( target.Equals(link.Blind) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one WindowHasBlinds link between a given Windowand a Blind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.WindowHasBlinds GetLink( global::Unican.smartHome.Window source, global::Unican.smartHome.Blind target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.WindowHasBlinds> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.WindowHasBlinds>(source, global::Unican.smartHome.WindowHasBlinds.WindowDomainRoleId);
			foreach ( global::Unican.smartHome.WindowHasBlinds link in links )
			{
				if ( target.Equals(link.Blind) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainRelationship RoomHasLights
	/// Description for Unican.smartHome.RoomHasLights
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasLights.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.RoomHasLights.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6cf71e0e-a22c-4715-8606-40b6e7757ac5")]
	public partial class RoomHasLights : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoomHasLights domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6cf71e0e, 0xa22c, 0x4715, 0x86, 0x06, 0x40, 0xb6, 0xe7, 0x75, 0x7a, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoomHasLights link in the same Partition as the given Room
		/// </summary>
		/// <param name="source">Room to use as the source of the relationship.</param>
		/// <param name="target">Light to use as the target of the relationship.</param>
		public RoomHasLights(Room source, Light target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoomHasLights.RoomDomainRoleId, source), new DslModeling::RoleAssignment(RoomHasLights.LightDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoomHasLights(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoomHasLights(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoomHasLights(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoomHasLights(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Room domain role code
		
		/// <summary>
		/// Room domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoomDomainRoleId = new global::System.Guid(0x2503bbce, 0x6089, 0x4173, 0xbc, 0x1d, 0xfb, 0x24, 0xdb, 0xb1, 0x2c, 0xd4);
		
		/// <summary>
		/// DomainRole Room
		/// Description for Unican.smartHome.RoomHasLights.Room
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasLights/Room.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.RoomHasLights/Room.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Lights", PropertyDisplayNameKey="Unican.smartHome.RoomHasLights/Room.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2503bbce-6089-4173-bc1d-fb24dbb12cd4")]
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Room)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoomDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoomDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Room of a Light
		/// <summary>
		/// Gets Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Room GetRoom(Light element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LightDomainRoleId) as Room;
		}
		
		/// <summary>
		/// Sets Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRoom(Light element, Room newRoom)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LightDomainRoleId, newRoom);
		}
		#endregion
		#region Light domain role code
		
		/// <summary>
		/// Light domain role Id.
		/// </summary>
		public static readonly global::System.Guid LightDomainRoleId = new global::System.Guid(0xef369523, 0xbff5, 0x4ed9, 0xba, 0x74, 0x40, 0x58, 0xaa, 0x2f, 0xd1, 0xdb);
		
		/// <summary>
		/// DomainRole Light
		/// Description for Unican.smartHome.RoomHasLights.Light
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.RoomHasLights/Light.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.RoomHasLights/Light.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Room", PropertyDisplayNameKey="Unican.smartHome.RoomHasLights/Light.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ef369523-bff5-4ed9-ba74-4058aa2fd1db")]
		public virtual Light Light
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Light)DslModeling::DomainRoleInfo.GetRolePlayer(this, LightDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LightDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Lights of a Room
		/// <summary>
		/// Gets a list of Lights.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Light> GetLights(Room element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Light>, Light>(element, RoomDomainRoleId);
		}
		#endregion
		#region Room link accessor
		/// <summary>
		/// Get the list of RoomHasLights links to a Room.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.RoomHasLights> GetLinksToLights ( global::Unican.smartHome.Room roomInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasLights>(roomInstance, global::Unican.smartHome.RoomHasLights.RoomDomainRoleId);
		}
		#endregion
		#region Light link accessor
		/// <summary>
		/// Get the RoomHasLights link to a Light.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.RoomHasLights GetLinkToRoom (global::Unican.smartHome.Light lightInstance)
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasLights> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasLights>(lightInstance, global::Unican.smartHome.RoomHasLights.LightDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Light not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoomHasLights instance accessors
		
		/// <summary>
		/// Get any RoomHasLights links between a given Room and a Light.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Unican.smartHome.RoomHasLights> GetLinks( global::Unican.smartHome.Room source, global::Unican.smartHome.Light target )
		{
			global::System.Collections.Generic.List<global::Unican.smartHome.RoomHasLights> outLinks = new global::System.Collections.Generic.List<global::Unican.smartHome.RoomHasLights>();
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasLights> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasLights>(source, global::Unican.smartHome.RoomHasLights.RoomDomainRoleId);
			foreach ( global::Unican.smartHome.RoomHasLights link in links )
			{
				if ( target.Equals(link.Light) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoomHasLights link between a given Roomand a Light.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Unican.smartHome.RoomHasLights GetLink( global::Unican.smartHome.Room source, global::Unican.smartHome.Light target )
		{
			global::System.Collections.Generic.IList<global::Unican.smartHome.RoomHasLights> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Unican.smartHome.RoomHasLights>(source, global::Unican.smartHome.RoomHasLights.RoomDomainRoleId);
			foreach ( global::Unican.smartHome.RoomHasLights link in links )
			{
				if ( target.Equals(link.Light) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
