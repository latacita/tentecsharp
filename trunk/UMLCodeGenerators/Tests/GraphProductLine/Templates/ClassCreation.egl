[%
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 1.6
// Last modification: 20/03/2013 
// Description: This template generates the specification of
//				the current class: declarations, properties, 
//				methods.
////////////////////////////////////////////////////////////
import "ModelCreation.egl";
import "ClassDeclaration.egl";
import "PropertiesCreation.egl"; 
import "MethodsCreation.egl";
import "ParametersCreation.egl";
import "UtilityMethodsCreation.egl";
import "BidirectionalRelationshipOneToOne.egl";
import "BidirectionalRelationshipOneToManySimplePart.egl";
import "BidirectionalRelationshipOneToManyCollectionPart.egl";
import "BidirectionalRelationshipManyToMany.egl";
%]
using System;
using System.Collections.Generic;
[%var p=currentPackage.name;
var implementation: List;
var allBidirectionalImplementations: List;
var isBidirectional=false;%]
// This is the content of the class named "[%=currentClass.name%]", which is 
// in the package: "[%=currentPackage.name%]", from the "[%=currentModel.name%]" model. 
[%=currentModel.modelDeclaration()%]
	[%=currentClass.classDeclaration()%]
		// Properties from the current class 
			[%
			// Checking all the bidirectional relations 
			for (b in bidirectionalRelations){
		 		// If the current class is a class with a bidirectional relation
				if (currentClass.name == b[0][0]){					
			 		// Separate the elements
					// Name of the relation from current class
					var nameThisClassRelation= b[1][0];
					// Name of the relation from the related class
					var nameOtherClassRelation= b[1][1];
					// Related Class
					var classRelated=b[0][1]; 
					// Multiplicity
					var multiplicity=b[3]; 
					// Elements is a list where each element is defined as the following:
					//			{<Generated code from implementation of the bidirectional relation>, <namenameThisClassRelation>} 
		 			var elements: List;
		 			// If it's a bidirectional relation one to one
		 			if (multiplicity[0]==1 and multiplicity[1]==1){ 
		 				elements.add(setImplementationOneToOne(nameThisClassRelation, nameOtherClassRelation, classRelated));
		 				elements.add(nameThisClassRelation); 
		 			} 
		 			// If it's a bidirectional relation one to many
		 			if ((multiplicity[0]==1 and multiplicity[1]<>1)){   
		 				// If the current class is the simple part of the relation
		 				elements.add(setImplementationOneToManySimplePart(nameThisClassRelation, nameOtherClassRelation, classRelated, currentClass.name));
		 				elements.add(nameThisClassRelation); 
		 			}
		 			// If it's a bidirectional relation one to many
		 			if ((multiplicity[0]<>1 and multiplicity[1]==1)){    
		 				// If the current class is the collection part of the relation
		 				elements.add(setImplementationOneToManyCollectionPart(nameThisClassRelation, nameOtherClassRelation, classRelated, currentClass.name, multiplicity[0]));
		 				elements.add(nameThisClassRelation); 
		 			}
		 			// If it's a bidirectional relation many to many
		 			if ((multiplicity[0]<>1 and multiplicity[1]<>1)){   
		 				elements.add(setImplementationManyToMany(nameThisClassRelation, nameOtherClassRelation, classRelated, currentClass.name, multiplicity[0]));
		 				elements.add(nameThisClassRelation); 
		 			
		 			}
		 			// Put the variable set to true because it's bidirectional
		 			isBidirectional=true; 
		 			// Add the current elements to the list of implementations from all the bidirectional relations
		 			// from the current class
		 			allBidirectionalImplementations.add(elements);
				}//if-currentClass
			}//for-bidirectionalRelations  
		%] 
		[%=currentClass.classPropertiesCreation(implementation, isBidirectional, allBidirectionalImplementations)%]
		// Utility methods from the current class 
		
		[%=classUtilityMethodsCreation()%]
		// Constructor and methods from the from the current class		
	[%=currentClass.classMethods(p)%]	
	

	
	
	}
} 
  




