[%
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 1.6 
// Last modification: 16/03/2013 
// Description: This operation generates the methods of 
//				the current class.
////////////////////////////////////////////////////////////
import "ReturnParameterCreation.egl";
import "ParametersCreation.egl";
import "Operations.eol";
@template	
operation Class classMethods(currentPackage: String, path: String) {   		
	var opers: String;
	var operations_void : Sequence;	
	var operations_return: Sequence;
	// Generate the constructor
	opers=private()+void()+currentPackage+"_init"+self.firstToUpperCase()+" () {}\n\t\t";
	
	var isReturn=false;
	// Separate void from return methods	
	for (oper in self.AllOperations){	
		for (par in oper.ownedParameter){  
			// Void methods:			
			// And also select those operations whose return type is void
			// Select those operations which doesn't have a type (the return type field is empty)	
			if (oper.type==null){
				isReturn=false;
			}else{ 
				if (par.direction.toString()=="return"){
					// Select those operations which doesn't have a return type (the return type field is empty)
					if (not par.type.name.isDefined()){	
						// By default, thread those operations like void operations
						isReturn=false;
					}else{
						isReturn=true;
					}//if-par-type
				}//if-par-direction			 
			}//if-oper-type	
		}//if-parameters	
		if (isReturn){
			// The current operation is a return method
			operations_return.add(oper);
		}else{
			// The current operation is a void method
			operations_void.add(oper);
		}				
	}//if-operations
	// Generate the void methods
	for (oper in operations_void) {			
		opers=opers+oper.visibility+" "+oper.esStatic()+virtual()+void()+currentPackage+"_"+oper.name+" ("+oper.parameters(currentPackage, path)+") {}\n\t\t";
	}	
	// Generate the return methods		
	for (oper in operations_return) {
		opers=opers+oper.visibility+" "+oper.esStatic()+virtual()+oper.returnParameter(currentPackage, path)+" "+currentPackage+"_"+oper.name+" ("+oper.parameters(currentPackage, path)+") {}\n\t\t";
	}%]        	
	[%=opers%]
[%}%]