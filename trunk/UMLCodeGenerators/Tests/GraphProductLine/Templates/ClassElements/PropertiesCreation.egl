[% 
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 2.2
// Last modification: 12/04/2013 
// Description: This operation generates the declaration of 
//				the properties from the current class and
//				their respective get and set methods.
////////////////////////////////////////////////////////////
import "../Operations.eol"; 
operation Element classPropertiesCreation(path: String, currentPackage: String, isBidirectional: Boolean, allBidirectionalImplementations: List) : List{  
	// Final result of the operation
	var finalResult: List;
	// Additional methods to implement bidirectionality;
	var additionalMethods: String;
	// Properties 
	var properties: String;	
	// Getter and setter 
	var getterAndSetter: String;	 
	// Iterator to name properties (if they don't have names)
	var iter=0;
	var isFromBidirectionalRelation=false;
	for (prop in self.getAttributes()) {
		var propertyname;
		var propertyName;
		// If a property doesn't have name, put a default one
		if (prop.name==""){
			propertyname="property_"+iter+"_From_"+self.name;
			propertyName="Property_"+iter+"_From_"+self.name;
		}else{
			propertyname=prop.name.firstToLowerCase();
			propertyName=prop.firstToUpperCase(); 
		} 
		// Check it the current class has bidirectional relations 
		// If the current property is bidirectional
		for (element in allBidirectionalImplementations){  
			 if (prop.name == "" or prop.name == element[1]){ 
			 	// Add the implemented get and set methods and the aditional set method to deal with bidirectionality		 	
			 	properties=properties+element[0][0];  
			 	additionalMethods=additionalMethods+element[0][1];
			 	isFromBidirectionalRelation=true;
			 }//if-prop
		}//for-allBidirectionalImplementations  
		if(isFromBidirectionalRelation==false){ 
			getterAndSetter=" "+propertyName+" {\n\t\t\tget { return this."+propertyname+"; }"+"\n\t\t\tset { this."+propertyname+"= value; }"+"\n\t\t}\n\t\t";	 
			properties=properties+private();	 
			var header;
			// If it's static
			properties=properties+prop.esStatic();
			// If it's readonly
			properties=properties+prop.esReadonly();
			// Header to add in the public version of the property		
			header=prop.esStatic()+prop.esReadonly();		
			// If it's a collection:
			// 		If it has more than one element, we have to specify the type of collection
			if(prop.upperBound==-1 or prop.upperBound>1){ 
				var collection=prop.typeCollection(currentPackage, path);
				// Collections don't have get and set methods
				properties=properties+collection+" "+propertyname+";\n\t\t";
			}else{
				// It current property doesn't have multiplicity, throw an exception 
				if (prop.upperValue==null and prop.type.isTypeOf(Class) and prop.association <> null){ 
					var message = "EXCEPTION: Property \""+propertyname+ "\" from class: \""+self.name+"\", from package: \""+currentPackage+ "\" doesn't have multiplicity assigned.";
					createErrorWindow(message); 
					throw (message);
				} 
				// Association between classes with just one element.
				var pro=prop.type.name;
				if(prop.type.name=="Integer"){
					pro=toInt();
				} 
				// Static properties don't have get and set methods
				if (prop.isStatic()){
					properties=properties+pro+" "+propertyname+";\n\t\t";
				}else{
					properties=properties+pro+" "+propertyname+";\n\t\t"+public()+header+pro+getterAndSetter;
				}//if-static
			} // if-upperBound	 
			// Increase the iterator
			iter=iter+1;
		}//if-isFromBidirectionalRelation
		isFromBidirectionalRelation=false;
	}//for	  
	finalResult.add(properties);
	finalResult.add(additionalMethods);
	return finalResult;
}%]