%%==========================================================================%%
%% Author : Abascal Fernández, Patricia                                     %%
%% Author : Sánchez Barreiro, Pablo                                         %%
%% Version: 1.1, 21/04/2013                                                 %%
%%                                                                          %%
%% Memoria del Proyecto Fin de Carrera                                      %%
%% Domain Engineering/Ejemplo de Generación de Código C#: Caso Complejo     %%
%%==========================================================================%%
Antes de comenzar a exponer los ejemplos más complejo, vamos a introducir aquellos conceptos que pasamos por algo en la sección \ref{domain:sec:transf} dada su complejidad: las relaciones bidireccionales y la herencia múltiple.

 \paragraph{Relaciones Bidireccionales} \ \\
 \begin{figure}[!tb]
  \centering
  \includegraphics[width=.75\linewidth]{domainEngineering/images/bidireccionales.eps} \\
  \caption{Tipos de relaciones bidireccionales}
  \label{dom:fig:bid}
\end{figure}

Las relaciones bidireccionales son aquellas en las que ambas clases relacionadas disponen de atributos de la clase opuesta. Existen tres tipos de relaciones bidireccionales:
 \begin{itemize}
   \item Bidireccionales one to one, en las que cada clase recibe un elemento de la clase opuesta (figura \ref{dom:fig:bid}, Mujer-Marido).
   \item Bidireccionales one to many, en la que una de las clases recibe un elemento de la clase destino y la otra recibe una colección de elementos de la clase opuesta (figura \ref{dom:fig:bid}, Alumno-Curso).
   \item Bidireccionales many to many, en la que ambas clases reciben colecciones de la clase opuesta (figura \ref{dom:fig:bid}, Trabajadores-Proyectos).
 \end{itemize}

 Llegados a este punto, basándonos en los ejemplos de la figura \ref{dom:fig:bid} nos surgen algunas preguntas:
 \begin{enumerate}
   \item ¿Si una mujer A tiene un esposo B y ese esposo B tiene una mujer que no sea A?
   \item ¿Si un alumno tiene asignado un curso pero ese curso no tiene a dicho alumno en su lista de alumnado?
   \item ¿Si un trabajador tiene asignado un proyecto pero en el listado de trabajadores dicho trabajador no aparece?
 \end{enumerate}
¿Existe alguna forma de poner solución a estos problemas?, la respuesta es \"sí\", a la hora de tratar este tipo de relaciones bidireccionales en los generadores de código correspondientes no basta con generar las propiedades tal como hemos estado haciendo hasta ahora sino que debemos implementar las propiedades a generar de una forma cuidadosa y exhaustiva para que no se produzcan este tipo de incoherencias, incluso recurriendo a la creación de métodos adicionales. Veamos a grandes rasgos cómo sería la implementación de la relación bidireccional one to one:
\begin{table}%
\begin{tabularx}{15cm}{|l|X|X|}
 \hline
{}&{\textbf{Mujer soltera}}&{\textbf{Mujer casada}} \\ \hline
\multirow{3}{*}{\textbf{Hombre soltero}} &
                Se casan el hombre soltero y la mujer soltera.
                & La mujer casada se divorcia. \\
&  & El antiguo marido de la mujer divorciada queda soltero. \\
&  & La mujer divorciada y el hombre soltero se casan. \\ \hline
\multirow{6}{*}{\textbf{Hombre casado}} & El hombre casado se divorcia. & El hombre casado se divorcia. \\
& La antigua mujer del marido divorciado queda soltera. & La antigua mujer del marido divorciado queda soltera. \\
& Se casan la mujer soltera y el hombre divorciado. & La mujer casada se divorcia. \\
&  & El antiguo marido de la mujer divorciada queda soltero. \\
&  & Se casan la mujer divorciada y el hombre divorciado. \\ \hline
\end{tabularx}
\end{table}%

\begin{tabulary}{10cm}{|L|C|R|J|}
\hline
Ejemplo de celda alineada a izquierda& Ejemplo de celda con texto
centrado & Ejemplo de celda alineada a derecha & Ejemplo de celda
contexto justificado\\
\hline
\end{tabulary}
\paragraph{Herencia múltiple} \ \\

\begin{figure}[!tb]
  \centering
  \includegraphics[width=.50\linewidth]{domainEngineering/images/herenciamultiple.eps} \\
  \caption{Tipos de relaciones bidireccionales}
  \label{dom:fig:her}
\end{figure}

 \begin{figure}[!tb]
  \centering
  \includegraphics[width=.80\linewidth]{domainEngineering/images/herenciamultiple_implementada.eps} \\
  \caption{Tipos de relaciones bidireccionales}
  \label{dom:fig:hersol}
\end{figure}
Los modelos UML admiten la herencia múltiple de clases pero lenguajes como C\# no, por lo que hay que transformar el modelo inicial y adaptarlo para funcione correctamente. Podemos encontrarnos con un conjunto de clases como el descrito en la figura \ref{dom:fig:her} donde se puede apreciar que la clase \imp{Profesor Universitario} presenta herencia múltiple de las clases \imp{Profesor} e \imp{Investigador}, por tanto, debemos procesar la información de forma que el código generado funcione de la forma esperada en C\#, las modificaciones que debemos realizar son:

\begin{itemize}
  \item Por cada una de las clases padre, \imp{Profesor} e \imp{Investigador}, se generan sendas interfaces \imp{Interfaz\_Profesor} e \imp{Interfaz\_Investigador}.
  \item Las clases padre solo contienen los métodos de la clase y heredan de sus respectivas interfaces.
  \item Las interfaces correspondientes a las clases padre tienen los métodos y las propiedades de la respectiva clase.
  \item La clase hija, \imp{Profesor Universitario}, hereda ahora de las interfaces \imp{Interfaz\_Profesor} e \imp{Interfaz\_Investigador} en lugar de heredar de las clases \imp{Profesor} e \imp{Investigador} como ocurría en el modelo inicial.
  \item La clase hija incorpora, además de sus propiedades y métodos, posee tantas colecciones como clases padre tenga, en el ejemplo \imp{profesores} e \imp{investigadores}.
\end{itemize}

