%%==========================================================================%%
%% Author : Abascal Fernández, Patricia                                     %%
%% Author : Sánchez Barreiro, Pablo                                         %%
%% Version: 1.1, 21/04/2013                                                 %%
%%                                                                          %%
%% Memoria del Proyecto Fin de Carrera                                      %%
%% Domain Engineering/Ejemplo de Generación de Código C#: Caso Sencillo     %%
%%==========================================================================%%
\lstset{style=sharpc}
\begin{lstlisting}
01 [%import "ReturnParameterCreation.egl";
02 import "ParametersCreation.egl";
03 import "../Operations.eol";
04 operation Element classMethods(currentPackage: String, path: String): String {   		
05  ...
06  opers=private()+void()+currentPackage+"_init"
          +self.firstToUpperCase()+" ( ) {}\n\t\t";
07  ...
08  for (oper in self.getOperations()){
09      for (par in oper.ownedParameter){
10          ...	
11          if (oper.type==null){
12              isReturn=false;
13          }else{
14              if (par.direction.toString().equals("return")){
15                  if (not par.type.name.isDefined()){
16                      isReturn=false;
17                  }else{
18                      isReturn=true;
19                  }//if-par-type
20              }//if-par-direction
21          }//if-oper-type
22      }//for-parameters
23      if (isReturn){
24          operations_return.add(oper);
25      }else{
26          operations_void.add(oper);
27      }		
28  }//for-operations	
29  for (oper in operations_void) {
30      if (oper.name==""){
31          methodname="method_"+iter;
32      }else{
33          methodname=oper.name;
34		}
35      opers=opers+oper.visibility()+oper.abstract()+oper.esStatic()+virtual()
              +void()+currentPackage+"_"+methodname
              +" ("+oper.parameters(currentPackage, path)+") {}\n\t\t";
36      // Increase the iterator
37      iter=iter+1;
38  }
39  for (oper in operations_return) {
40      if (oper.name==""){
41          methodname="method_"+iter;
42      }else{
43          methodname=oper.name;
44      }
45      opers=opers+oper.visibility()+oper.abstract()+oper.esStatic()+virtual()
             +oper.returnParameter(currentPackage, path)+" "+currentPackage+"_"+methodname
             +" ("+oper.parameters(currentPackage, path)+") {}\n\t\t";
46      // Increase the iterator
47      iter=iter+1;
48  }
49  return opers;
50 }%]

\caption{Implementación del generador de código \imp{MethodsCreation}}
\label{dom:code:method} 
\end{lstlisting} 

Para introducir al lector en la implementación de los generadores de código, vamos a analizar en detalle uno de los generadores de código más sencillos: \imp{MethodsCreation}, el fichero fuente aparece en la figura \ref{dom:code:method}. Vamos a proceder al análisis detallado del mismo:
\begin{itemize}
  \item Líneas 1-3, generadores de código que utiliza y fichero \imp{Operations.eol} que contiene las funciones básicas comunes a los generadores de código.
  \item Línea 4, descripción de la función que retornará el texto generado.
  \item Línea 6, texto correspondiente al constructor de la clase de la forma $<$nombre del paquete$>$\_init$<$nombre de la clase$>$.
  \item Líneas 8-28, tratamos una a una todas las operaciones descritas en elemento actual (clase o interfaz).
  \item Líneas 9-22, en cada operación recorremos todos y cada uno de los parámetros.
  \item Líneas 11-13, si la operación no tiene definido un tipo, es decir, si el usuario ha obviado especificar si la función devuelve una colección, un entero, un elemento de una clase, etc, por defecto se trata como una operación void (operación que no retorna ningún valor).
  \item Línea 15, si la operación tiene un tipo de retorno definido, comprobamos si dicho parámetro es de retorno.
  \item Línea 16, si el parámetro es de retorno pero no está definido vuelve a ser tratada como una operación void.
  \item Línea 18, si el parámetro es de retorno y tiene un tipo definido se trata de una operación que sí retorna un valor.
  \item Línea 24, si la operación que está siendo analizada retorna un valor, se añade a la lista de operaciones que devuelven un valor.
  \item Línea 26, si la operación que está siendo analizada no retorna un valor, se añade a la lista de operaciones que no devuelven un valor.
  \item Línea 29-38, añadir al string resultado la información correspondiente a los métodos de la clase actual que no retornan ningún valor (métodos void).
  \item Línea 31, si el método no tiene un nombre definido, se otorga un nombre por defecto.
  \item Línea 35, se realizan llamadas a los generadores de código para obtener los parámetros de la función.
  \item Línea 39-48, de manera análoga a las operaciones que no retornan ningún valor, se procede a añadir al string resultado los métodos de la clase que sí retornan un valor.
  \item Línea 49, se retorna el string con todos los métodos de la clase o interfaz actual.
\end{itemize}

Un vez explicado un ejemplo sencillos, las siguiente sección {domain:sec:ejcomplejo} explica ejemplos más complejos que quedan a la curiosidad del lector.

