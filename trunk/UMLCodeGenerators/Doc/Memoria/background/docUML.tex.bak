%%==================================================================%%
%% Author : Abascal Fernández, Patricia                             %%
%%          Sánchez Barreiro, Pablo                                 %%
%% Version: 1.1, 18/06/2013                                         %%
%%                                                                  %%
%% Memoria del Proyecto Fin de Carrera                              %%
%% Background/Diseño Orientado a Características con UML            %%
%===================================================================%%

El \emph{diseño orientado a características}~\cite{kastner:2008} es un paradigma para la construcción, adaptación y síntesis de sistemas software a gran escala. Una \emph{característica} es una unidad coherente funcionalidad de un sistema software. Una características proporciona una opción de configuración potencial, ya que dicha característica debe poder ser incluida o excluida del producto software, dando lugar a productos software con diferentes funcionalidades. Por ejemplo, en el caso del software de gestión de hogares inteligentes, toda la funcionalidad relacionada con la gestión automática de luces, sería considerada como una característica.

La idea básica del diseño orientado a características es descomponer un sistema software en módulos bien definidos, donde cada módulo encapsula una característica que el sistema ofrece. El objetivo de la descomposición es la construcción de software bien estructurado que puede ser adaptado a las necesidades del usuario y el entorno, mediante la selección y composición de las características adecuadas. 

Por tanto, a partir de un conjunto de características, se pueden generar multitud de sistemas software compartiendo características comunes y diferenciándose en otras, lo que hace que este paradigma sea especialmente adecuado para el diseño e implementación de \emph{línea de productos software}.

Para ilustrar como funciona el paradigma orientado a características, utilizaremos un diseño UML (ver Figura~\ref{back:fig:smartHome}) orientado a características ilustraremos de nuestro caso de estudio, el software de gestión de hogares inteligentes~\ref{sec:back:casoEstudio}.

Dos conceptos comúnmente utilizados por los lenguajes orientados a características son el concepto de \emph{familia de clases} y de \emph{clase virtual}.

\begin{figure}[!tb]
  \centering
  \includegraphics[width=.55\linewidth]{background/images/umlDesign.eps} \\
  \caption{Diseño orientado a características del software para hogares inteligentes}
  \label{back:fig:smartHome}
\end{figure}

Una \emph{familia de clases} es un nuevo tipo de módulo que se utiliza para encapsular y gestionar como una unidad de composición un conjunto de clases pertenecientes a una misma característica. Por ejemplo, en nuestro caso de estudio, todas las clases que estén relacionadas con la gestión automáticas de luces, deberían estar encapsuladas en una misma familia de clases. Estas familias de clases se representan en el modelo UML de la Figura~\ref{back:fig:smartHome} como paquetes que contienen clases. Por ejemplo, el paquete \emph{LightMng} representa la familia de clases que se correspondería con la característica \emph{gestión de luces automáticas}. 

Asimismo, una \emph{clase virtual} es una clase perteneciente a una familia de clases y que es susceptible de ser heredada y sobreescrita por familias de clases que hereden de la familia de clases que contiene dicha clase virtual. La figura~\ref{back:fig:smartHome} ilustra esta situación. Las familias de clases se representan mediante paquetes UML, y herencia entre clases, mediante relaciones \emph{merge}. Cuando una familia de clases hereda de otra, hereda implícitamente todas sus clases virtuales. Si la primera contiene clases virtuales con el mismo nombre que la familia de clases que hereda, entonces la clase virtual de la familia de clases hija hereda de la clase virtual con el mismo nombre de la familia de clases padre. Por ejemplo, en la figura~\ref{back:fig:smartHome}, la clase \imp{Gateway} de la familia de clases \imp{LightMng} heredaría implícitamente de la clase \imp{Gateway} de la familia de clases \imp{BaseSystem}. En cada familia de clases hija, se pueden añadir por tanto nuevos atributos y métodos a las clases virtuales de las familias de clases padre.


Además, las referencias entre clases se actualizan automáticamente. Por ejemplo, en el caso de la figura~\ref{back:fig:smartHome}, aunque no se haga explícitamente, cualquier referencia a una clase del tipo \imp{Gateway} dentro de la familia de clases \imp{LightMng} se referirá a la clase virtual \imp{Gateway} de la familia de clases \imp{LightMng} y no a la clase virtual de mismo nombre de la familia de clases \imp{BaseSystem}. De esta forma, las referencias están siempre actualizadas a su versión más extendida.

Para implementar una línea de productos software, cada característica se considera como una familia de clases.
Dentro de cada familia de clases, cada característica se diseña usando las técnicas tradicionales de la orientación a objetos, tal como se muestra en la figura~\ref{back:fig:smartHome}.

Para realizar una configuración, es decir, para crear un producto concreto por composición de características, simplemente hay que crear una nueva familia de clases que herede de las familias de clases que correspondan a las características seleccionadas. La figura \ref{back:fig:smartHome} muestra como se crearía un producto nuevo mediante la composición de las características \imp{LightMng} y \imp{BaseSystem}.

La siguiente sección proporciona una breve descripción sobre la metodología TENTE, una metodología orientada a características y dirigida por modelos para el desarrollo y configuración de líneas de productos software.

