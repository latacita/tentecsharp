%%==================================================================%%
%% Author : Abascal Fernández, Patricia                             %%
%%          Sánchez Barreiro, Pablo                                 %%
%% Version: 1.2, 11/06/2013                                         %%                                                                                    %%                                                                  %%
%% Memoria del Proyecto Fin de Carrera                              %%
%% Introduccion/Metodologia TeNet                                   %%
%%==================================================================%%

Tal como se ha comentado en la sección anterior, la metodología Te.Net se trata de una variante de la tecnología TENTE. A diferencia de TENTE, la cual obliga a utilizar como lenguaje de programación final un lenguaje orientado a características que soporte el concepto de \emph{familia de clases}, al estilo de \emph{CaesarJ}~\citep{} u \emph{ObjectTeams}~\citep{}, Te.NEt utiliza como lenguaje de programación destino un lenguaje convencional orientado a objetos, más concretamente C\#.

El primer paso a realizar para llevar a cabo este rediseño de la metodología TENTE era analizar como se podía dar soporte a la orientación a aspectos en un lenguaje de programación orientado a objetos como C\#. Tras realizar una buscar opciones en el estado del arte actual, se encontró un prometedor trabajo~\citep{} en el cual se proponía la utilización de las clases parciales de C\# como mecanismos para dar soporte a la orientación características.

%%%%%%%%%%%% Clases parciales y patrón Slicer %%%%%%%%%%%%

Las \emph{clases parciales} permiten a los desarrolladores fragmentar la implementación de una clase en un conjunto de ficheros, cada uno de los cuales contiene una porción, o incremento, de una funcionalidad de la clase. Sin embargo, no ofrecen ningún mecanismo para agrupar o encapsular características, por lo que no es posible ocultar clases y métodos que pertenecen a una característica específica de aquellas clases y métodos que pertenecen a características independientes. Además, permiten añadir nuevos atributos y métodos a existentes clases parciales pero no permite sobreescribir o extender métodos ya existentes.

Para solventar dichos problemas, el profesor Pablo Sánchez, dentro del Departamento de Matemáticas, Estadística y Computación, ha desarrollado un patrón de diseño llamado \emph{Patrón Slicer} \cite{perez:2011} que parte de la siguiente idea: todos los problemas que se pretenden solucionar tienen origen en el hecho de no poner tener métodos con el mismo nombre en distintas clases parciales, hay que evitar dicha situación. Estos fragmentos de clases parciales, son combinados en tiempo de compilación para crear una única clase que auna todas las características seleccionadas inicialmente por el cliente.

Por ejemplo, supongamos que un cliente quiere un vehículo con varias características adicionales entre las que se encuentran: aire acondicionado, sensor de lluvia, medidor de temperatura en grados Celsius y GPS integrado en idioma español e inglés. La base de nuestro producto final será el vehículo, al cual iremos añadiendo las distintas características requeridas por el cliente. Hay algunas peculiaridades, la clase del medidor de temperatura puede estar a su vez fragmentada en varios componentes (temperatura en Celsius, temperatura en Farentheit) y de los cuales en el modelo final solo usaremos uno de ellos, el de temperatura en Celsius. Lo mismo ocurre con el selector de idiomas para el GPS, solo se elegirá el idioma español e inglés. De esta forma, el producto final juntará todas estas características dentro de un mismo elemento que será el vehículo entregado al usuario final atendiendo a sus requisitos.
