//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass SmartHome
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.SmartHome.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.SmartHome.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("339f9b18-20fb-4609-90bf-26c5aa59948f")]
	public sealed partial class SmartHome : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SmartHome domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x339f9b18, 0x20fb, 0x4609, 0x90, 0xbf, 0x26, 0xc5, 0xaa, 0x59, 0x94, 0x8f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmartHome(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmartHome(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Floors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Floors.
		/// </summary>
		public DslModeling::LinkedElementCollection<Floor> Floors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Floor>, Floor>(global::Unican.smartHome.SmartHomeHasFloors.SmartHomeDomainRoleId);
			}
		}
		#endregion
		#region SmartEnergy opposite domain role accessor
		/// <summary>
		/// Gets or sets SmartEnergy.
		/// Description for Unican.smartHome.SmartHomeHasSmartEnergy.SmartHome
		/// </summary>
		public SmartEnergy SmartEnergy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartHomeDomainRoleId) as SmartEnergy;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartHomeDomainRoleId, value);
			}
		}
		#endregion
		#region LightSimulation opposite domain role accessor
		/// <summary>
		/// Gets or sets LightSimulation.
		/// Description for Unican.smartHome.SmartHomeHasLightSimulation.SmartHome
		/// </summary>
		public LightSimulation LightSimulation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasLightSimulation.SmartHomeDomainRoleId) as LightSimulation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasLightSimulation.SmartHomeDomainRoleId, value);
			}
		}
		#endregion
		#region BlindSimulation opposite domain role accessor
		/// <summary>
		/// Gets or sets BlindSimulation.
		/// Description for Unican.smartHome.SmartHomeHasBlindSimulation.SmartHome
		/// </summary>
		public BlindSimulation BlindSimulation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasBlindSimulation.SmartHomeDomainRoleId) as BlindSimulation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasBlindSimulation.SmartHomeDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.LightSimulation.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: SmartHomeHasLightSimulation.LightSimulation
					if (this.LightSimulation != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.BlindSimulation.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: SmartHomeHasBlindSimulation.BlindSimulation
					if (this.BlindSimulation != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.Floor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.SmartEnergy.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: SmartHomeHasSmartEnergy.SmartEnergy
					if (this.SmartEnergy != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Unican.smartHome.LightSimulation sourceLightSimulation1 = sourceElement as global::Unican.smartHome.LightSimulation;
			if (sourceLightSimulation1 != null)
			{
				// Create link for path SmartHomeHasLightSimulation.LightSimulation
				this.LightSimulation = sourceLightSimulation1;

				return;
			}
				
			global::Unican.smartHome.BlindSimulation sourceBlindSimulation2 = sourceElement as global::Unican.smartHome.BlindSimulation;
			if (sourceBlindSimulation2 != null)
			{
				// Create link for path SmartHomeHasBlindSimulation.BlindSimulation
				this.BlindSimulation = sourceBlindSimulation2;

				return;
			}
				
			global::Unican.smartHome.Floor sourceFloor3 = sourceElement as global::Unican.smartHome.Floor;
			if (sourceFloor3 != null)
			{
				// Create link for path SmartHomeHasFloors.Floors
				this.Floors.Add(sourceFloor3);

				return;
			}
				
			global::Unican.smartHome.SmartEnergy sourceSmartEnergy4 = sourceElement as global::Unican.smartHome.SmartEnergy;
			if (sourceSmartEnergy4 != null)
			{
				// Create link for path SmartHomeHasSmartEnergy.SmartEnergy
				this.SmartEnergy = sourceSmartEnergy4;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Unican.smartHome.LightSimulation sourceLightSimulation1 = sourceElement as global::Unican.smartHome.LightSimulation;
			if (sourceLightSimulation1 != null)
			{
				// Delete link for path SmartHomeHasLightSimulation.LightSimulation
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.SmartHomeHasLightSimulation.GetLinks((global::Unican.smartHome.SmartHome)this, sourceLightSimulation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.SmartHomeHasLightSimulation.SmartHomeDomainRoleId, global::Unican.smartHome.SmartHomeHasLightSimulation.LightSimulationDomainRoleId);
				}

				return;
			}
				
			global::Unican.smartHome.BlindSimulation sourceBlindSimulation2 = sourceElement as global::Unican.smartHome.BlindSimulation;
			if (sourceBlindSimulation2 != null)
			{
				// Delete link for path SmartHomeHasBlindSimulation.BlindSimulation
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.SmartHomeHasBlindSimulation.GetLinks((global::Unican.smartHome.SmartHome)this, sourceBlindSimulation2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.SmartHomeHasBlindSimulation.SmartHomeDomainRoleId, global::Unican.smartHome.SmartHomeHasBlindSimulation.BlindSimulationDomainRoleId);
				}

				return;
			}
				
			global::Unican.smartHome.Floor sourceFloor3 = sourceElement as global::Unican.smartHome.Floor;
			if (sourceFloor3 != null)
			{
				// Delete link for path SmartHomeHasFloors.Floors
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.SmartHomeHasFloors.GetLinks((global::Unican.smartHome.SmartHome)this, sourceFloor3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.SmartHomeHasFloors.SmartHomeDomainRoleId, global::Unican.smartHome.SmartHomeHasFloors.ElementDomainRoleId);
				}

				return;
			}
				
			global::Unican.smartHome.SmartEnergy sourceSmartEnergy4 = sourceElement as global::Unican.smartHome.SmartEnergy;
			if (sourceSmartEnergy4 != null)
			{
				// Delete link for path SmartHomeHasSmartEnergy.SmartEnergy
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.SmartHomeHasSmartEnergy.GetLinks((global::Unican.smartHome.SmartHome)this, sourceSmartEnergy4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartHomeDomainRoleId, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartEnergyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass Floor
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.Floor.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.Floor.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("49688a4d-8cb6-4e64-a49d-b685837284e6")]
	public partial class Floor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Floor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x49688a4d, 0x8cb6, 0x4e64, 0xa4, 0x9d, 0xb6, 0x85, 0x83, 0x72, 0x84, 0xe6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Floor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Floor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3b26e5a9, 0x8fa9, 0x4ace, 0x8f, 0xea, 0x1c, 0x36, 0x6e, 0x66, 0xeb, 0x65);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Unican.smartHome.Floor.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.Floor/Name.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.Floor/Name.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3b26e5a9-8fa9-4ace-8fea-1c366e66eb65")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Floor.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Floor, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Floor.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Floor.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Floor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Floor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SmartHome opposite domain role accessor
		/// <summary>
		/// Gets or sets SmartHome.
		/// </summary>
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasFloors.ElementDomainRoleId) as SmartHome;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasFloors.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Rooms opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Rooms.
		/// Description for Unican.smartHome.FloorHasRooms.Floor
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Room> Rooms
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Room>, Room>(global::Unican.smartHome.FloorHasRooms.FloorDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.Room.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Unican.smartHome.Room sourceRoom1 = sourceElement as global::Unican.smartHome.Room;
			if (sourceRoom1 != null)
			{
				// Create link for path FloorHasRooms.Rooms
				this.Rooms.Add(sourceRoom1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Unican.smartHome.Room sourceRoom1 = sourceElement as global::Unican.smartHome.Room;
			if (sourceRoom1 != null)
			{
				// Delete link for path FloorHasRooms.Rooms
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.FloorHasRooms.GetLinks((global::Unican.smartHome.Floor)this, sourceRoom1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.FloorHasRooms.FloorDomainRoleId, global::Unican.smartHome.FloorHasRooms.RoomDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass Room
	/// Description for Unican.smartHome.Room
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.Room.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.Room.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("98577327-94ad-4777-ad36-2b5a522cf359")]
	public partial class Room : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Room domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x98577327, 0x94ad, 0x4777, 0xad, 0x36, 0x2b, 0x5a, 0x52, 0x2c, 0xf3, 0x59);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Room(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Room(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x25f83b7d, 0xdb0b, 0x45a1, 0x93, 0x52, 0x15, 0x89, 0xa5, 0x6d, 0xc4, 0xfe);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Unican.smartHome.Room.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Unican.smartHome.Room/Name.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Unican.smartHome.Room/Name.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("25f83b7d-db0b-45a1-9352-1589a56dc4fe")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Room.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Room, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Room.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Room.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Room element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Room element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Floor opposite domain role accessor
		/// <summary>
		/// Gets or sets Floor.
		/// Description for Unican.smartHome.FloorHasRooms.Room
		/// </summary>
		public virtual Floor Floor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.FloorHasRooms.RoomDomainRoleId) as Floor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.FloorHasRooms.RoomDomainRoleId, value);
			}
		}
		#endregion
		#region Heaters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Heaters.
		/// Description for Unican.smartHome.RoomHasHeaters.Room
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Heater> Heaters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Heater>, Heater>(global::Unican.smartHome.RoomHasHeaters.RoomDomainRoleId);
			}
		}
		#endregion
		#region Windows opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Windows.
		/// Description for Unican.smartHome.RoomHasWindows.Room
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Window> Windows
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Window>, Window>(global::Unican.smartHome.RoomHasWindows.RoomDomainRoleId);
			}
		}
		#endregion
		#region Lights opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Lights.
		/// Description for Unican.smartHome.RoomHasLights.Room
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Light> Lights
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Light>, Light>(global::Unican.smartHome.RoomHasLights.RoomDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.Light.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.Window.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.Heater.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Unican.smartHome.Light sourceLight1 = sourceElement as global::Unican.smartHome.Light;
			if (sourceLight1 != null)
			{
				// Create link for path RoomHasLights.Lights
				this.Lights.Add(sourceLight1);

				return;
			}
				
			global::Unican.smartHome.Window sourceWindow2 = sourceElement as global::Unican.smartHome.Window;
			if (sourceWindow2 != null)
			{
				// Create link for path RoomHasWindows.Windows
				this.Windows.Add(sourceWindow2);

				return;
			}
				
			global::Unican.smartHome.Heater sourceHeater3 = sourceElement as global::Unican.smartHome.Heater;
			if (sourceHeater3 != null)
			{
				// Create link for path RoomHasHeaters.Heaters
				this.Heaters.Add(sourceHeater3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Unican.smartHome.Light sourceLight1 = sourceElement as global::Unican.smartHome.Light;
			if (sourceLight1 != null)
			{
				// Delete link for path RoomHasLights.Lights
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.RoomHasLights.GetLinks((global::Unican.smartHome.Room)this, sourceLight1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.RoomHasLights.RoomDomainRoleId, global::Unican.smartHome.RoomHasLights.LightDomainRoleId);
				}

				return;
			}
				
			global::Unican.smartHome.Window sourceWindow2 = sourceElement as global::Unican.smartHome.Window;
			if (sourceWindow2 != null)
			{
				// Delete link for path RoomHasWindows.Windows
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.RoomHasWindows.GetLinks((global::Unican.smartHome.Room)this, sourceWindow2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.RoomHasWindows.RoomDomainRoleId, global::Unican.smartHome.RoomHasWindows.WindowDomainRoleId);
				}

				return;
			}
				
			global::Unican.smartHome.Heater sourceHeater3 = sourceElement as global::Unican.smartHome.Heater;
			if (sourceHeater3 != null)
			{
				// Delete link for path RoomHasHeaters.Heaters
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.RoomHasHeaters.GetLinks((global::Unican.smartHome.Room)this, sourceHeater3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.RoomHasHeaters.RoomDomainRoleId, global::Unican.smartHome.RoomHasHeaters.HeaterDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass SmartEnergy
	/// Description for Unican.smartHome.SmartEnergy
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.SmartEnergy.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.SmartEnergy.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("07b70599-d7ba-4fcb-a644-36ef95761606")]
	public partial class SmartEnergy : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SmartEnergy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x07b70599, 0xd7ba, 0x4fcb, 0xa6, 0x44, 0x36, 0xef, 0x95, 0x76, 0x16, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmartEnergy(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SmartEnergy(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome opposite domain role accessor
		/// <summary>
		/// Gets or sets SmartHome.
		/// Description for Unican.smartHome.SmartHomeHasSmartEnergy.SmartEnergy
		/// </summary>
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartEnergyDomainRoleId) as SmartHome;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasSmartEnergy.SmartEnergyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass LightSimulation
	/// Description for Unican.smartHome.LightSimulation
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.LightSimulation.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.LightSimulation.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e0f48982-edaa-4d2a-b0f4-c89702b84b41")]
	public partial class LightSimulation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LightSimulation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0f48982, 0xedaa, 0x4d2a, 0xb0, 0xf4, 0xc8, 0x97, 0x02, 0xb8, 0x4b, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LightSimulation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LightSimulation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome opposite domain role accessor
		/// <summary>
		/// Gets or sets SmartHome.
		/// Description for Unican.smartHome.SmartHomeHasLightSimulation.LightSimulation
		/// </summary>
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasLightSimulation.LightSimulationDomainRoleId) as SmartHome;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasLightSimulation.LightSimulationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass BlindSimulation
	/// Description for Unican.smartHome.BlindSimulation
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.BlindSimulation.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.BlindSimulation.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9c7c873f-b1cf-44ba-b701-64370c5a62f9")]
	public partial class BlindSimulation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BlindSimulation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9c7c873f, 0xb1cf, 0x44ba, 0xb7, 0x01, 0x64, 0x37, 0x0c, 0x5a, 0x62, 0xf9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BlindSimulation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BlindSimulation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SmartHome opposite domain role accessor
		/// <summary>
		/// Gets or sets SmartHome.
		/// Description for Unican.smartHome.SmartHomeHasBlindSimulation.BlindSimulation
		/// </summary>
		public virtual SmartHome SmartHome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.SmartHomeHasBlindSimulation.BlindSimulationDomainRoleId) as SmartHome;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.SmartHomeHasBlindSimulation.BlindSimulationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass Heater
	/// Description for Unican.smartHome.Heater
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.Heater.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.Heater.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f63cf0cc-7ae2-414b-8101-0cf54fbbbc22")]
	public partial class Heater : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Heater domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf63cf0cc, 0x7ae2, 0x414b, 0x81, 0x01, 0x0c, 0xf5, 0x4f, 0xbb, 0xbc, 0x22);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Heater(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Heater(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Room opposite domain role accessor
		/// <summary>
		/// Gets or sets Room.
		/// Description for Unican.smartHome.RoomHasHeaters.Heater
		/// </summary>
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.RoomHasHeaters.HeaterDomainRoleId) as Room;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.RoomHasHeaters.HeaterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass Window
	/// Description for Unican.smartHome.Window
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.Window.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.Window.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4307924c-e5c5-4296-89c8-b884cbadb114")]
	public partial class Window : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Window domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4307924c, 0xe5c5, 0x4296, 0x89, 0xc8, 0xb8, 0x84, 0xcb, 0xad, 0xb1, 0x14);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Window(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Window(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Room opposite domain role accessor
		/// <summary>
		/// Gets or sets Room.
		/// Description for Unican.smartHome.RoomHasWindows.Window
		/// </summary>
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.RoomHasWindows.WindowDomainRoleId) as Room;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.RoomHasWindows.WindowDomainRoleId, value);
			}
		}
		#endregion
		#region Blinds opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Blinds.
		/// Description for Unican.smartHome.WindowHasBlinds.Window
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Blind> Blinds
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Blind>, Blind>(global::Unican.smartHome.WindowHasBlinds.WindowDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Unican.smartHome.Blind.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Unican.smartHome.Blind sourceBlind1 = sourceElement as global::Unican.smartHome.Blind;
			if (sourceBlind1 != null)
			{
				// Create link for path WindowHasBlinds.Blinds
				this.Blinds.Add(sourceBlind1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Unican.smartHome.Blind sourceBlind1 = sourceElement as global::Unican.smartHome.Blind;
			if (sourceBlind1 != null)
			{
				// Delete link for path WindowHasBlinds.Blinds
				
				foreach (DslModeling::ElementLink link in global::Unican.smartHome.WindowHasBlinds.GetLinks((global::Unican.smartHome.Window)this, sourceBlind1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Unican.smartHome.WindowHasBlinds.WindowDomainRoleId, global::Unican.smartHome.WindowHasBlinds.BlindDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass Blind
	/// Description for Unican.smartHome.Blind
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.Blind.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.Blind.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f58edd90-074b-4dfe-a828-3aba90c59cdd")]
	public partial class Blind : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Blind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf58edd90, 0x074b, 0x4dfe, 0xa8, 0x28, 0x3a, 0xba, 0x90, 0xc5, 0x9c, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Blind(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Blind(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Window opposite domain role accessor
		/// <summary>
		/// Gets or sets Window.
		/// Description for Unican.smartHome.WindowHasBlinds.Blind
		/// </summary>
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.WindowHasBlinds.BlindDomainRoleId) as Window;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.WindowHasBlinds.BlindDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Unican.smartHome
{
	/// <summary>
	/// DomainClass Light
	/// Description for Unican.smartHome.Light
	/// </summary>
	[DslDesign::DisplayNameResource("Unican.smartHome.Light.DisplayName", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Unican.smartHome.Light.Description", typeof(global::Unican.smartHome.smartHomeDomainModel), "Unican.smartHome.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Unican.smartHome.smartHomeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("98f487f9-bc72-44a7-9052-ffbb946b4008")]
	public partial class Light : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Light domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x98f487f9, 0xbc72, 0x44a7, 0x90, 0x52, 0xff, 0xbb, 0x94, 0x6b, 0x40, 0x08);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Light(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Light(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Room opposite domain role accessor
		/// <summary>
		/// Gets or sets Room.
		/// Description for Unican.smartHome.RoomHasLights.Light
		/// </summary>
		public virtual Room Room
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Unican.smartHome.RoomHasLights.LightDomainRoleId) as Room;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Unican.smartHome.RoomHasLights.LightDomainRoleId, value);
			}
		}
		#endregion
	}
}
