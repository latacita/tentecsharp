%==================================================================%
% Author : Pérez Ruiz, Alejandro                                   %
% Version: 1.0, 16/03/2011                                         %                                                                                    %                                                                  %
% Memoria del Proyecto Fin de Carrera                              %
% Capítulo Domain Engineering, Archivo raíz                        %
%==================================================================%

\chapterheader{Domain Engineering}{Domain Engineering}

\label{chap:domain}

% Introducción al capítulo
En este capítulo se describirá la definición arquitectónica y el proceso llevado a cabo para implementar la parte del proyecto correspondiente a la \emph{ingeniería de dominio} (en inglés, \emph{Domain Engineering}).

\chaptertoc
\section{Definición Arquitectónica}
%% Section{Definición Arquitectónica}
%%% Contar que es el gateway como lo controla todo
%%% Cuenta lo de los observadores
%%% Cuenta que el gateway viene a ser similar a un Mediator
El hogar inteligente posee una serie de dispositivos que se descomponen en sensores y actuadores. Los sensores son los encargados de obtener los datos del elemento al que pertenecen, como por ejemplo, los grados que hace en una habitación, la apertura que tiene una ventana... Mientras que los actuadores se encargan de ejecutar las ordenes, por ejemplo que una persiana se abra o se cierre, la calefacción se encienda a unos determinados grados...

Tanto los sensores como los actuadores se encuentran conectados a un dispositivo central que los coordina, el cual se conoce como puerta de enlace o Gateway. Dicho Gateway se encarga de leer los datos de los sensores, procesarlos y enviar las ordenes adecuadas a los actuadores, de igual modo, el Gateway recibe ordenes de los usuarios que son ejecutadas por los actuadores para modificar los elementos de la casa.

Además el Gateway posee una lista de plantas que tiene el hogar, a su vez cada planta contiene otra lista de las habitaciones que se encuentran en dicha planta, y un objeto tiempo que se encarga de simular el transcurso del tiempo en el sistema.

En la figura \ref{domain:fig:defArq} se puede observar el diseño UML que representa todo lo dicho anteriormente, quedando reflejado como el Gateway es la pieza central del sistema.

\begin{figure}[!tb]
 \centering
 \includegraphics[width=.45\linewidth]{domainEngineering/Images/definicionArq.eps} \\
 \caption{Diseño UML que muestra la definición arquitectónica}
 \label{domain:fig:defArq}
\end{figure}

Para que el usuario pueda monitorizar y controlar la situación de los elementos es necesario la creación de una interfaz gráfica que represente las funcionalidades propias del Gateway. De igual modo, es necesaria otra interfaz gráfica que juegue el papel de simulador, ya que la implementación presentada en este proyecto no está conectada a dispositivos reales, y por ello es necesario simular valores para los sensores, tales como la temperatura, y el tiempo del sistema. Ambas interfaces gráficas se conectarán al Gateway para poder comunicarse con todos los dispositivos.

Debido a que el Gateway simplifica la comunicación entre los objetos del sistema siendo éste un objeto que gestiona la distribución de mensajes entre sensores, actuadores, e interfaces gráficas, se puede decir que sigue el patrón de diseño denominado \emph{mediador}\cite{gamma:1994} (\emph{Mediator pattern}, en inglés).

En el diseño arquitectónico descrito anteriormente se observa que existen dependencias entre objetos de forma que cuando un objeto cambia de estado, todos sus objetos dependientes son notificados y actualizados. Tales dependencias son:
\begin{enumerate}
\item Las interfaces gráficas y el Gateway tienen que ser notificados y actualizados cada vez que un sensor cambie.
\item Tanto el Gateway como las interfaces gráficas tienen que ser actualizados cuando el tiempo actual del sistema cambie.
\end{enumerate}
Claramente esto puede ser modelado siguiendo el patrón de diseño llamado \emph{observador}\cite{gamma:1994} (\emph{Observer pattern}, en inglés), es decir, por cada objeto que vaya a ser observado es necesario crear una lista donde se registrarán todos los observadores, de este modo cada vez que se produzca una modificación en el objeto observado, éste utilizará la lista para notificar a todos sus observadores que se ha producido un cambio.

Con el diseño arquitectónico básico definido y teniendo en cuenta que el presente proyecto implementa una línea de productos software para hogares inteligentes, se debe encapsular cada una de las características ,para que posteriormente cada aplicación creada pueda ser compuesta de diferentes maneras. Por ello se hará uso de las clases parciales y la herencia para encapsular cada característica. Este proceso iterativo será descrito con mas detalle en las siguientes secciones.

\section{Iteración 1: Sistema Base}
%% Section{Iteracion 1: Base System}
%%% Requisitos específicos
%%% Diseño UML
%%% Diseño Interfaz Gráfica
%%% Implementación
El sistema base (\emph{Base System}, en inglés) es la característica que define la arquitectura base para el sistema, es decir, debe proporcionar a los usuarios el acceso a los servicios del Gateway a través de las interfaces y además permitir que el número de plantas y habitaciones sea variable. Ésta característica define la clase parcial \imp{Gateway} que en cada nueva característica(control inteligente de luces, calefacción, ventanas...), será vuelta a definir, ya que cada vez que una misma clase parcial es definida se está dividiendo la clase en varios archivos de código fuente, que posteriormente cuando se compile la aplicación serán combinados.

Por lo tanto, el sistema base implementará el diseño UML mostrado en la sección anterior con la figura \ref{domain:fig:defArq}, con lo que crearemos la infraestructura necesaria para que las características que se implementarán posteriormente tengan una base sólida para crear dispositivos que extiendan a los actuadores y sensores definidos a través de las clases abstractas \imp{Actuator} y \imp{Sensor}, además de extender a la propia clase \imp{Gateway}, añadiéndola nuevas funcionalidades y/o características a través del uso de las clases parciales.

Una parte importante del sistema son las interfaces gráficas que permitirán al usuario interactuar con el Gateway. Se implementan dos, la primera de ellas permite al usuario actuar con el Gateway, mientras que la segunda hará el papel de simulador, ya que es necesario modificar algunos valores que deberían ser alterados por elementos externos al propio sistema, tales como la temperatura actual de una habitación o el tiempo, debido a que el sistema no se encuentra conectado a dispositivos reales. No obstante, no se debe olvidar que se está implementado una línea de productos software, por lo que todos los diseños de las interfaces gráficas deben adaptarse a cualquier composición de características que haga un usuario.

Como punto de partida para el diseño de las interfaces gráficas se ha utilizado la API para el desarrollo de aplicaciones gráficas incluida en .NET, denominada \emph{Windows Forms}\cite{brown:2006}. Con esta API para construir una interfaz gráfica se deben añadir controles a una forma e implementar respuestas a las acciones de los usuarios, tales como un click de ratón o la pulsación de una tecla. Un control se define como una interfaz de usuario que muestra datos o acepta datos de entrada. Por lo que lo primero que se debe pensar es en los controles que serán más adecuados para la ventana que contiene la interfaz gráfica. Debido a que el número de plantas y el de habitaciones debe ser variable, la interfaz debe permitir cualquier cantidad de plantas o habitaciones, además el control elegido debe ser un contenedor para otros controles, ya que cuando una planta sea seleccionada se deben mostrar todas las habitaciones que contiene, y cada habitación debe de poder contener diferentes características (control de ventanas,persianas,luces...). Por todo lo citado anteriormente, se ha decidido utilizar un diseño como el mostrado en la figura \ref{domain:fig:gatewayGUI}, que se compone de un primer control con pestañas que contiene las plantas y que permitirá añadir nuevas características para su control global en toda la casa, el segundo control tiene todas las plantas mostradas por pestañas y por último por cada pestaña específica de una planta existe otro control que contiene pestañas con las distintas habitaciones.

\begin{figure}[!tb]
 \centering
 \includegraphics[width=.45\linewidth]{domainEngineering/Images/GUI.eps} \\
 \caption{Diseño de la interfaz gráfica de usuario para el Gateway}
 \label{domain:fig:gatewayGUI}
\end{figure}

Siguiendo el mismo razonamiento que anteriormente, se ha tenido que diseñar y elegir los controles que irán en la ventana del simulador. En el caso del sistema base, esta característica, en el apartado gráfico del simulador, solo se encargará de mostrar las plantas y habitaciones que se han creado, por lo que se vuelve a seleccionar el \imp{TabControl} para permitir añadir fichas(\imp{TabPage} que contengan las diferentes características.





