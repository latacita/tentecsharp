[% 
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 1.6 
// Last modification: 20/03/2013 
// Description: This operation generates the declaration of 
//				the properties from the current class and
//				their respective get and set methods.
////////////////////////////////////////////////////////////
import "Operations.eol";

@template
operation Class classPropertiesCreation(path: String, currentPackage: String, bidirectionalImplementation: List, isBidirectional: Boolean, allBidirectionalImplementations: List) {  
	// Properties 
	var properties: String;	
	// Getter and setter 
	var getterAndSetter: String;
	 
	for (prop in self.AllAttributes) {					
		// Check it the current class has bidirectional relations
		if (isBidirectional){		
			// If the current property is bidirectional
			for (elemento in allBidirectionalImplementations){  
				 if (prop.name == "" or prop.name == elemento[1]){ 
				 	// Add the implemented get and set methods and the aditional set method to deal with bidirectionality		 	
				 	properties=properties+elemento[0];				 	  
				 }//if-prop
			}//for-allBidirectionalImplementations
		// If it's not a class with bidirectional relations
		}else{						
			getterAndSetter=" "+prop.firstToUpperCase()+" {\n\t\t\tget { return this."+prop.name+"; }"+"\n\t\t\tset { this."+prop.name+"= value; }"+"\n\t\t}\n\t\t";	 
			properties=properties+private();
			var header;
			// If it's static
			properties=properties+prop.esStatic();
			// If it's readonly
			properties=properties+prop.esReadonly();
			// Header to add in the public version of the property		
			header=prop.esStatic()+prop.esReadonly();		
			// If it's a collection:
			// 		If it has more than one element, we have to specify the type of collection
			if(prop.upperBound==-1 or prop.upperBound>1){
				// NOTE: The attributes must have a type. If not, it would give an error... Maybe add an exception here?
				var collection=prop.typeCollection(currentPackage, path);
				// Collections don't have get and set methods
				properties=properties+collection+" "+prop.firstToLowerCase()+";\n\t\t"+public()+header+collection+getterAndSetter;
			}else{
				// Association between classes with just one element.
				var pro=prop.type.name;
				// Static properties don't have get and set methods
				if (prop.isStatic()){
					properties=properties+pro+" "+prop.firstToLowerCase()+";\n\t\t";
				}else{
					properties=properties+pro+" "+prop.firstToLowerCase()+";\n\t\t"+public()+header+pro+getterAndSetter;
				}//if-static
			} // if-upperBound	
		}//if-bidirectional
	}//for
	%]
[%=properties%]
[% } %]