namespace ProyectWithPartialClasses
{
	partial class [%=currentClass.name%] {		
		[% 
		// Attributes 
		for (attr in currentClass.AllAttributes) {
			if (attr.name.isEmpty()){
			}else{%]
  			[%=attr.visibility%] [%=attr.type.name%] [%=attr.name%]; 
			[%}  		
    	}%]
    	
		[% 
		// Operations
		for (oper in currentClass.AllOperations) {
			// If it's the constructor
			if (oper.name==currentClass.name){%]
			[%=oper.visibility%] [%=oper.name%] ([%=oper.parameters()%]) {
			}
			[%}else{
			// If it's a void method
				if (oper.type==null or oper.type.isTypeOf(PrimitiveType)){%]
			[%=oper.visibility%] virtual void [%=currentPackage.name%]_[%=oper.name%] ([%=oper.parameters()%]) {
			}   	
				[%}else{%]
  		 	[%=oper.visibility%] virtual [%=oper.type.name%] [%=currentPackage.name%]_[%=oper.name%] ([%=oper.parameters()%]) {
  		 	}
  		 		[%}
  			}   	
    	}%]        	
	}
}


[%
  @template
  operation Feature parameters() { %]
    [% 
	// Method's parameters
	var parameters: String;
	for (oper in self) {
		for (param in oper.ownedParameter){
			if (param.type==null or param.name==""){
				parameters="";
			}else{
				parameters=parameters+" "+param.type.name+" "+param.name+",";
			}		
		}
    }
    // Deleting the last "," of the string, if needed
    if (not parameters.isEmpty()){	
    	parameters = parameters.substring(0, parameters.length() - 1);
    }    
    %]
    [%=parameters%]
[% } %]