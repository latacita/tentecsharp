[%
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 1.7
// Last modification: 29/04/2013 
// Description: This operation returns the parameters for 
//				the current method. 
////////////////////////////////////////////////////////////
import "../Operations.eol"; 
operation Feature parameters(currentPackage: String, path: String, rootPath: String): String { 
	// Method's parameters
	var params: String;
	var parameters: Collection;	
	// Reject blank and return parameters
	parameters := self.ownedParameter.reject(p| p.direction.toString().equals("return"));
	// Iterator to name methods (if they don't have names)
	var iter=0; 
	// Add to the var params each parameter from the given method
	for (param in parameters){		
		// If a parameter doesn't have name, put a default one
		var par;
		if (param.name==""){			
			par="param_"+iter; 
		}else{
			par=param.name;  
		} 
		// Throws exception if a type is not assigned for a parameter
		if (param.type==null){
			var message = "EXCEPTION: Parameter \""+par+ "\" from package: \""+currentPackage+ "\" doesn't have a type assigned.";
			deleteProject(rootPath); 
			createErrorWindow(message);
			throw (message);
		}else{
			// Check if the parameter is a collection
			if(param.upperBound==-1 or param.upperBound>1){
				// If the parameter is a collection
				var collection=param.typeCollection(currentPackage, path);
				params=params+" "+collection+" "+par+",";
			}else{
				if(param.type.name=="Integer"){
					params=params+toInt()+par+",";
				}else{
					params=params+" "+param.type.name+" "+par+",";	
				} 
			}		
		}		
		// Increase the iterator
		iter=iter+1;					
	}
	// Deleting the last "," of the string, if needed
    if (not params.isEmpty()){	
    	params = params.substring(0, params.length() - 1);
    }    
	params=params+" ";
	return params;
}%]		
 
   
