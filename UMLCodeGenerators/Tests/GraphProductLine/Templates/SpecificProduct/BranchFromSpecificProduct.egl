[%
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 1.2
// Last modification: 11/05/2013
// Description:  Extract the map structure from the current
//				 branch, including the deepest versions of
//				 the methods.
////////////////////////////////////////////////////////////
import "../SpecificProduct/IsThereMethod.egl"; 
operation branch(path: List, fuseElements:Set): Map{
var map: Map;  
var found=false; 
// For every pack
for (pack in path){
	// Look which one implements each of the elements from the generated product
	for (element in fuseElements){
		// Extract the classes from the current pack
		var classes = pack.packagedElement.select(e|e.isTypeOf(Class));
		var interfaces = pack.packagedElement.select(e|e.isTypeOf(Interface));
		var listClassAndInterfaces:List;
		for (c in classes){
			listClassAndInterfaces.add(c);
		}
		for (i in interfaces){
			listClassAndInterfaces.add(i);
		} 
		// Check if it implements a class from the generated product
		var implInCurrentPack=listClassAndInterfaces.includes(element[0]);
		// If implements a class from the generated product
		if (implInCurrentPack){	
			// Add the constructor
			var const=pack.name+"_init"+element[0].name;
			var tuple: List;
			tuple.add(element[0]);
			tuple.add(element[0]);
			tuple.add(pack.name);
			map.put(tuple,const);
			// Check if it implements a method from the class 
			for (method in element[1]){ 
				var isThereMethod = pack.isThereMethod(element[0].name, method);
				// If implements a method from the generated product
				if (isThereMethod[1]){
					// Add the method
					var impl=pack.name+"_"+isThereMethod[0].name; 
					var tuple: List;
					tuple.add(element[0]);
					tuple.add(isThereMethod[0]);
					tuple.add(pack.name); 
					// If we haven't found a deeper version
					if (map.get(tuple)==null){
						// We have just found the most deep version of the operation
						// so it stops looking for it in the rest of the path
						map.put(tuple,impl);
					}//if-map 
				}//if-isThereMethod
			}//for-method
		}//if-implInCurrentPack
	}//for-element
}//for-pack
return map;
}
%]