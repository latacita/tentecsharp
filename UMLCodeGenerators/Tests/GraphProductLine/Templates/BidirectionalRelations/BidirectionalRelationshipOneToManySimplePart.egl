[%
////////////////////////////////////////////////////////////
//
// Author: Patricia Abascal Fernández
// Version: 1.3 
// Last modification: 12/04/2013 
// Description: This template generates the implemented version
//				of the set method, and an aditional one, to 
//				bidirectional relationships one to many
//				(if the current class is the one with simple relation)
////////////////////////////////////////////////////////////
operation setImplementationOneToManySimplePart (nameThisClassRelation: String, nameOtherClassRelation: String,  currentClass: String, classRelated: String): List{
	var implementation:String;	
	var thisClassProperty = nameThisClassRelation.firstToUpperCase();
	var otherClassProperty = nameOtherClassRelation.firstToUpperCase();   
	// Creating the string which contains the implementation of the set method	 
	implementation=implementation+"\n\t\t\t\tif ("+nameThisClassRelation+" == null)\n\t\t\t\t{\n\t\t\t\t\t";
	implementation=implementation+"if (!value.get_"+currentClass+"_FromProperty_"+otherClassProperty+"().Contains(this))\n\t\t\t\t\t{\n\t\t\t\t\t";
	implementation=implementation+"\t"+nameThisClassRelation+" = value;\n\t\t\t\t\t\t";
	implementation=implementation+"value.add_"+currentClass+"_FromProperty_"+otherClassProperty+"(this);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t";
	implementation=implementation+"value.remove_"+currentClass+"_FromProperty_"+otherClassProperty+"(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t";
	implementation=implementation+"if (!value.get_"+currentClass+"_FromProperty_"+otherClassProperty+"().Contains(this))\n\t\t\t\t\t{\n\t\t\t\t\t\t";
	implementation=implementation+nameThisClassRelation+" = value;\n\t\t\t\t\t\t";
	implementation=implementation+"value.add_"+currentClass+"_FromProperty_"+otherClassProperty+"(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t";
			
	// Creating the string which contains the implementation of the whole Property
	var all="private "+classRelated+" "+nameThisClassRelation+";\n\t\tpublic "+classRelated+" "+thisClassProperty+" {\n\t\t\tget { return this."+nameThisClassRelation+"; }"+"\n\t\t\tset { "+implementation+" }"+"\n\t\t}\n\t\t";
	//  And additional method
	var methods="\n\t\t// Aditional methods";
	methods=methods+"\n\n\t\tpublic void remove_"+thisClassProperty+"_From_"+classRelated+"()\n\t\t{\n\t\t\t"+thisClassProperty+".remove_"+currentClass+"_FromProperty_"+otherClassProperty+"(this);\n\t\t\tthis.set_"+thisClassProperty+"_From_"+classRelated+"(null);\n\t\t}\n\t\t";
	methods=methods+"\n\t\tpublic void set_"+thisClassProperty+"_From_"+classRelated+"("+classRelated+" m)\n\t\t{\n\t\t\tthis."+nameThisClassRelation+" = m;\n\t\t}\n\t\t";
	
	var finalImplementation: List;
	finalImplementation.add(all);
	finalImplementation.add(methods);
	
	return finalImplementation;  
}%]