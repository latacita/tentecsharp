%%==================================================================%%
%% Author : Abascal Fernández, Patricia                             %%
%%          Sánchez Barreiro, Pablo                                 %%
%% Version: 1.1, 18/06/2013                                         %%
%%                                                                  %%
%% Memoria del Proyecto Fin de Carrera                              %%
%% Background/Diseño Orientado a Características con UML            %%
%===================================================================%%

%\todo{Escribir una pequeña sección sobre desarrollo software orientado a características.}
%\todo{Resume un poco lo del proyecto de Alejandro, y explica un poco el modelo UML del hogar inteligente}

El \emph{diseño orientado a características}~\cite{kastner:2008} es un paradigma para la construcción, adaptación y síntesis de sistemas software a gran escala. Una \emph{característica} es una unidad de funcionalidad de un sistema software que satisface un requisito, representa una decisión de diseño y proporciona una opción de configuración potencial. La idea básica del diseño orientado a características es descomponer un sistema software en módulos agrupando las características que ofrece. El objetivo de la descomposición es la construcción de software bien estructurado que puede ser adaptado a las necesidades del usuario y al entorno de la aplicación.

Típicamente, a partir de un conjunto de características, se pueden generar multitud de sistemas software compartiendo características comunes y diferenciándose en otras. El conjunto de los sistemas software generados a partir de un conjunto de características, comentado en la sección~\ref{sec:back:spl}, corresponde al concepto de \emph{línea de productos software}.

Para estudiar las ventajas del diseño orientado a características ilustraremos los ejemplos con diagramas UML de nuestro caso de estudio del hogar inteligente~\ref{sec:back:casoEstudio}. Una \emph{familia de clases} es una unidad de encapsulamiento que sirve para agrupar clases relacionadas. Las familias de clases reciben un tratamiento similar al de las clases, soportando relaciones de herencia entre ellas.

Asimismo, una \emph{clase virtual} es una clase perteneciente a una familia de clases y que es susceptible de ser heredada y sobreescrita por familias de clases que hereden de la familia de clases que contiene dicha clase virtual. La figura~\ref{back:fig:smartHome} ilustra esta situación. Las familias de clases se representan mediante paquetes UML, y herencia entre clases, mediante relaciones \emph{merge}. Cuando una familia de clases hereda de otra, hereda implícitamente todas sus clases virtuales. Si la primera contiene clases virtuales con el mismo nombre que la familia de clases que hereda, entonces la clase virtual de la familia de clases hija hereda de la clase virtual con el mismo nombre de la familia de clases padre. Por ejemplo, en la figura~\ref{back:fig:smartHome}, la clase \imp{Gateway} de la familia de clases \imp{BaseSystem} heredaría implícitamente de la clase \imp{Gateway} de la familia de clases \imp{HeaterMng}. En cada familia de clases hija, se pueden añadir por tanto nuevos atributos y métodos a las clases virtuales de las familias de clases padre.

\begin{figure}[ht!]
  \centering
  \includegraphics[width=.55\linewidth]{background/images/SmartHome.eps} \\
  \caption{Diseño para los hogares inteligentes}
  \label{back:fig:smartHome}
\end{figure}

Además, las referencias entre clases se actualizan automáticamente. Por ejemplo, en el caso de la figura~\ref{back:fig:smartHome}, aunque no se haga explícitamente, cualquier referencia a una clase del tipo \imp{Gateway} dentro de la familia de clases \imp{BaseSystem} se referirá a la clase virtual \imp{Gateway} de la familia de clases \imp{BaseSystem} y no a la clase virtual de mismo nombre de la familia de clases \imp{HeaterMng}. De esta forma, las referencias están siempre actualizadas a su versión más extendida.

Para implementar una línea de productos software, cada característica se considera como una familia de clases.
Dentro de cada familia de clases, cada característica se diseña usando las técnicas tradicionales de la orientación a objetos, tal como se muestra en la figura~\ref{back:fig:smartHome}.

Para realizar una configuración, es decir, para crear un producto concreto por composición de características, simplemente hay que crear una nueva familia de clases que herede de las familias de clases que correspondan a las características seleccionadas. La figura \ref{back:fig:smartHome} muestra como se crearía un producto nuevo mediante la composición de las características \imp{WindowMng} y \imp{BaseSystem}.

La siguiente sección proporciona una breve descripción sobre la metodología TENTE, una metodología orientada a características y dirigida por modelos para el desarrollo y configuración de líneas de productos software.

