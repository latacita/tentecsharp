%%==================================================================%%
%% Author : Abascal Fernández, Patricia                             %%
%%          Sánchez Barreiro, Pablo                                 %%
%% Version: 1.2, 11/06/2013                                         %%                                                                                    %%                                                                  %%
%% Memoria del Proyecto Fin de Carrera                              %%
%% Introducción                                                     %%
%%==================================================================%%

%%==================================================================%%
%% NOTA(Pablo): Al final vamos a escribir la introducción de arriba %%
%%              a abajo, es decir, comenzamos hablando de Líneas de %%
%%              Productos Software, luego hablamos de TENTE,        %%
%%              luego de Te.NET, del patrón Slicer y por último     %%
%%              ya hablamos de los objetivos concretos del proyecto %%
%%==================================================================%%

Las \emph{Líneas de Productos Software}~\citep{} se han popularizado en la última década como un adecuado paradigma para el desarrollo, mantenimiento y gestión de proyectos software altamente similares. Por ejemplo, ...

\todo{Describir un ejemplo de empresa que desarrolla un producto software, el producto software tiene éxito, y a continuación se lo pide otra empresa pero modificado, a continuación otra empresa, nuevamente modificado, y así sucesivamente. Describir los problemas que surgirían si esto se realiza siguiendo un enfoque tradicional. Explicar en una sola frase que dicho problema se puede resolver con las líneas de productos software. Inspírate en el proyecto de Alejandro, y antes de escribir el ejemplo, mándame cual sería el ejemplo}


En relación con las líneas de productos software, y dentro del proyecto europeo \emph{AMPLE (Aspect-oriented Model-Driven Product Line Engineering)}~\footnote{www.ample-project.net}, el profesor Pablo Sánchez, actualmente adscrito a la Universidad de Cantabria, junto con otros investigadores, creó la metodología TENTE~\citep{fuentes:2009:caise,sanchez:2011:tente}. La principal novedad de dicha metodología era la de integrar diversos avances que se habían ido realizando en los paradigmas del desarrollo software orientado a características y el desarrollo software dirigido por modelos.

La \emph{orientación a características}~\cite{} tiene como objetivo  encapsular porciones coherentes de la funcionalidad proporcionadas por una aplicación en módulos independientes llamados \emph{características}. La orientación a características eleva el nivel al cual se agrupa la funcionalidad de un sistema del concepto de clase al concepto de \emph{conjunto} o \emph{familia de clases}, las cuales se añaden o eliminan de una aplicación como piezas o módulos indivisibles. De esta forma, las variaciones existentes en una familia de productos software se encapsulan en \emph{características}, las cuales se añaden o eliminan de un producto concreto de acuerdo a las necesidades de cada cliente en particular.

\todo{Describir en un párrafo cuál es el objetivo del desarrollo software dirigido por modelos}

Una vez definida la metodología TENTE, se decidió proceder a su transferencia tecnológica. Fue en este punto donde se encontró un obstáculo que en principio parecía insalvable.

\todo{Explicar el problema derivado de la utilización de CaesarJ como lenguaje de programación. Inspírate en el proyecto de Alejandro}

Por tanto, se decidió que si se quería transferir la metodología TENTE a la industria software, debíamos rediseñar dicha metodología para que utilizase como lenguaje de programación un lenguaje orientado a objetos convencional, al estilo de Java o C\#, en lugar de CaesarJ. Dada la preferencia de la mayoría de las empresas del sector industrial cántabro por la plataforma .Net~\citep{}, se decidió elegir como lenguaje destino C\#, el lenguaje de programación insignia de la plataforma .Net. La siguiente sección describe el estado actual de la metodología .Net.







%%===================================================================%%
%% NOTA(Pablo): Mira a ver si de esto quieres aprovechar algo
%%===================================================================%%
%%
%% El uso de las líneas de producto software permite la reducción
%% de costes de desarrollo por la reutilización de la tecnología en
%% los distintos sistemas, a mayor cantidad de productos a desarrollar
%% mayor rentabilidad respecto a los sistemas creados individualmente.
%% Ofrece alta calidad en el producto resultante porque se realizan
%% pruebas de los componentes de la plataforma en diferentes tipos
%% de producto para ayudar a detectar y corregir errores. Reduce el
%% tiempo de creación debido a la reutilización de los componentes ya
%% existentes para cada nuevo producto y reduce también el esfuerzo
%% requerido por el mantenimiento ya que cuando se cambia algo de un
%% componente de la plataforma, ese cambio se propaga a todos los
%% componentes que lo empleen, y de esta forma se reduce el esfuerzo
%% de aprender cómo funciona cada elemento individualmente.
%%
%% En contraposición a la flexibilidad que ofrece el desarrollo de
%% software individual, específico para cliente pero que supone grandes
%%  costes, las líneas de producto software delimitan las variaciones
%% de sus productos a un conjunto prefijado y optimizan, por tanto, los
%% procesos para dichas variaciones.
%%
%%
%% La línea de productos software se puede extrapolar a otros ámbitos de
%% producción. Un ejemplo clásico de línea de productos es la fabricación
%% de automóviles, donde se ofrece al cliente un modelo base al cual puede
%% añadir aquellos extras que así desee, personalizando el vehículo y
%%  adaptándolo a sus necesidades. De esta forma partiendo del mismo modelo
%% y de unas variaciones adicionales preestablecidas, y diseñadas de tal
%% forma que se adaptan perfectamente al modelo seleccionado, se puede
%% obtener gran cantidad de variaciones en el modelo final de manera
%% automática.
%%
%%  En el ámbito del desarrollo software, las empresas ya no se centran en la creación
%%  de un producto específico para un cliente (por ejemplo, diseñar y construir un
%%  portal para la Universidad de Cantabria), sino en un domino (por ejemplo, diseñar
%%  y construir un portal para universidades). Los principales desafíos a los que se
%%  enfrentan las empresas son: delimitar dicho dominio, identificar las distintas
%%  variaciones que se van a permitir y desarrollar la infraestructura que permita
%%  realizar los productos a bajo coste sin reducir la calidad.
%%

%%==================================================================%%
%% NOTA(Pablo): Este ejemplo no me gusta mucho, pero se podría      %%
%%              utilizar                                            %%
%%==================================================================%%
%%
%% Por ejemplo, supongamos que un cliente quiere un vehículo con varias
%% características adicionales entre las que se encuentran: aire
%% acondicionado, sensor de lluvia, medidor de temperatura en grados
%% Celsius y GPS integrado en idioma español e inglés. La base de
%% nuestro producto final será el vehículo, al cual iremos añadiendo
%% las distintas características requeridas por el cliente. Hay
%% algunas peculiaridades, la clase del medidor de temperatura puede
%% estar a su vez fragmentada en varios componentes (temperatura en
%% Celsius, temperatura en Farentheit) y de los cuales en el modelo
%% final solo usaremos uno de ellos, el de temperatura en Celsius.
%% Lo mismo ocurre con el selector de idiomas para el GPS, solo se
%% elegirá el idioma español e inglés. De esta forma, el producto
%% final juntará todas estas características dentro de un mismo
%% elemento que será el vehículo entregado al usuario final
%% atendiendo a sus requisitos.
%%
%%==================================================================%%


%%%%%%%%%%%% Metodologías de desarrollo de líneas de productos software %%%%%%%%%%%%

%%===================================================================%%
%% NOTA(Pablo): Esto se va antecedentes
%%===================================================================%%
%%  El proceso de desarrollo de la línea de productos software se divide en dos procesos \cite{pohl:2010}: Ingeniería de %% Dominio e Ingeniería de la Aplicación. Por un lado la \emph{Ingeniería del Dominio} se encarga de la construcción de %% la plataforma mediante la delimitación del conjunto de aplicaciones para las que está creada, además de definir y
%% construir qué características serán reusables y cuales específicas para cada uno de los productos que se desean
%% fabricar.
%%
%% Por otra parte, la \emph{Ingeniería de la Aplicación} se encarga de la creación de los productos para clientes
%% concretos. Partiendo de la plataforma creada en la fase de Ingeniería de Dominio, y reutilizando tantos componentes
%% como fuera necesario, se crea una especialización del producto base acorde a los requisitos del cliente.
%%
%%
